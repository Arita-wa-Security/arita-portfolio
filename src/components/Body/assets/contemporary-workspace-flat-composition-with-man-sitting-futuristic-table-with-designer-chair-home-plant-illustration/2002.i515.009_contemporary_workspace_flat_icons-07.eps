%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2002.i515.009.P.m004.c25.Contemporary workspace flat icons-07.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 3/24/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 7 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2002.i515.009.P.m004.c25.Contemporary workspace flat icons</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-03-24T11:35:28+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-03-24T11:35:28+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-03-24T11:35:28+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>176</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUJqmoLY2h&#xA;m4h5nZYbaEnj6k0rBI0rQ0BY7mmwqe2Kose/XFXYq7FXYq7FUp81azeaNos+o2tn9fkgoTahijMD&#xA;t8JCvuPlgkaDGcqFvPIvzY82mXm+gTPBHzDhYJYeRo9KMTMBx4r8W4NSKZV4h7nH8eQ6GlePzt5o&#xA;lllkuLo2SKxRLMwp6oUbqzeoimrA13VcyICxuwOokNl3lz84pZ6Wuo6ZPI6XNxatfxLSNvSmdIzx&#xA;puzKq14bVr0yqU6NNvj8rD1AGoBpT2ybkOxV2KuxV2KpF501K8sdCm+qR1nug1tHOWKrC8qMI5GI&#xA;DGnOg+ZxutyxlfIdWAfll5fj0HzFLdSXE95dagHhklllJUKW9RPhNa040698wNPlvIe7o7PVQrHG&#xA;ufXyesLcQvK0StWRftCh2+npme65UxV2KuxV2KuxV2KtGSMSCMsBIwLKldyFoCQPAchirHPPfnDT&#xA;/LGlLcXVyttJO/CBmUtuKVIFDWlR+vtlWaUgPTzbMQjfqNBIfL/5p2mt+T9ev9OcTaxodtcTNFMo&#xA;COUR3gekZFY34UNCCPbJY+LhHFzYZJRMjw8kx/K/zfqvmjRLu71QWy3dreNakWausdFhik3EjyHl&#xA;ykI65NhE2zHFkkmvS63p7pqGlw/X0YrHeWMknpqqCv76Nzy4la/EOJ5DwpuUJnb39tPbG4VwqKKy&#xA;ciBwoKnl4UwJY8v5meSp9Dm1uy1a3udNty4nuVf4UKdQwpyqajiKVbthpFsS8t/mf/inzXJFZ3Vp&#xA;caUsLT2luEdLuNonReUgYkFWJY9AaccgDLiII2bZRjwAg+o9HqkUiyxrIvRhUZJrXYq7FXYq7FWO&#xA;+btTuIbG+tLdQLg2vqW0hK0EhLj4lJqV+DsDmPmymNgdzkYcIlRPe8l1nWvzAsorYGGUi4dUe6sr&#xA;fm0bMQFVRJRGZ6/Cu1exzFjmn1P2OWcGPokGupqV5cW99e2+p3F3ZP6wnvdPtrQyDYcZFia4WREC&#xA;bc18cslqJxG33Fqjpscuf3/sT7yZ5182Xmv6PpraalnotzcCP9zbMiUNZDwYAL/lGg98hi1GQyF8&#xA;izy6fGImuYe+5sXXOxV2KuxV2KpZ5n9MeXdTeReSxW0soFK0aNC6kV7hlBGAixS3W7yEecUttfOl&#xA;29ldzX9sVk/crE6CnxKa+oKL9mpYUFRWlc140kwbBHN2A1mOQ3B3DO/InmLXLlCvmCwTTriQAAiR&#xA;Zeb9zVGdQCSaZnXLi8nC9HDtfEzbJsHYq7FXYq7FXYq80138xGs/P0SLEz6TpkM9tqPFFM3rSUYB&#xA;KuAVPpoa/OuY0s8RL3No0s5EEVSQf85KQaneafo1tZ2FxcrHNNJJLFGXAPBQoAWp3qe3bL5TA5mm&#xA;iWOUuQtDfldqWp6j+Xcvl2S2htILiK706TUFQrInMNGrvUqHePl9nqQO2SHe1CZ+mvem35HeVNT8&#xA;pXXmO21QqyXEtuLO4QGkyxCQM4Xdh9sdcJbIinruBm7FWNeZPJ8eqade2EbulrqETwXUUbtE3CQU&#xA;YKy/q/hiinz9pX5L39/598w2ej+na6FpN1awXekuzmOb/Rw9SwanIFuXzOStiQ9T8q/kdpuja/aa&#xA;5FKbKW2Dg20BLLJ6ilCHLl9qHbj3xMkQgRzNvUkRY0CIKKuwGRbG8VdirsVdirz/APMjyXdeYrpr&#xA;iHVrvTl060Ejx20pjWQM0hqwAPIqENNx1zHyXZquXX4t8ACBZI36fBiulfl7cJaWrX+r3t2La/jg&#xA;QrcTRfG9zwEh4Ny5RMKqeX3ZTEyPKhu2mEY1ZMtnrVrERogikkaU+iys7ksxqD1JJOZUPp3ceX17&#xA;JJ6TqPJBI2R+DH3OmT/80nKwPo/HQthO8/x1ZXmQ47sVdirsVdirTokiNHIodHBV0YVBB2IIOKvD&#xA;fNflXzH+X+p3nmbTbi11TSNRuI4pLS6LQ3UTTsscaRyAMjKKKCSAeI6bE5Lm18NcmSOurw8Fu7Ma&#xA;ZfkjnFIBJFJStRDOhC1NPu+0taUjSSSm/kn8ybfXNSl0U2F6lzbF1+vGLlauIxvWVSeLV2of17ZE&#xA;S3puOMiNs4yTB2KuxV2KuxV87+dUr5s15iBX62aFuIFOABNWBP3Zq8gPGfe7bCRwB615yv7a5vbT&#xA;RoqvdCaF5mU7RCV/TQGv7T1Jp4DfqK5OrFgDvLiaQ0Se4I/yUYv0K0Coq+hPLG6qABVm9Q1/4PJ6&#xA;U3D3MNUKn70j0rVdUtfNOo6ncvy8s6jefou2G9LWazpArkV48J7j1YyQNmCeO2TTjM7wJdirsVSb&#xA;y75V07QpdSntpJp7nVrpry9uLhlZ2kYBQBwVAFRQFUU6YAEk2nOFDsVdirsVdirsVU/q6GWSRvi9&#xA;VFRlNCOK8v8Amo4OHe08W1KdrZpbzTugCpMwYKP5jUsfpZq5GMKJZSnYCqkUaRCID4AKUO+2SAoU&#xA;xJs20tvAqRIsa8YKeiKD4KKU+Hw+EkY0tlUwodirsVdirsVdiryXzN+U8V7pSap5hafX/NE91Yxz&#xA;Tr6jQQwG8jE6W8EQXhF6DNyqD4165IFiQy7yx5DHlm7kttLvpW8tTLMX0W5PrJE7spQW7N8SIBzD&#xA;KxNa+O+Am0gI3QPIXk/y9eTXujaXDZ3U6lJJk5FuJPIqORbiCQNhkBEBslkkeZT/ACTB2KuxV2Ku&#xA;xVAS+X9Blnknl062kmmr6sjQxsz1BU8iRvVWI+WNqgbryjZzarFqEc8tvxuReXECcSk0qRQxJXkG&#xA;Kqq2ybLSuQnjEiCejZDIYggdUToOjT6Wt2j3CzxXExmiCxmNkqoUhjzfl9kb0GDFjEBS5cpmbULb&#xA;y4JfKLaFqJAe7tpYb+S3P+7bgMZpIy69S7swJXrlttSd4EuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4jffnX52bUpL&#xA;ePSbHSTorTNr9rdzPNM0cQVl9EBYQOe4U1bsenWiecR5jdy4aQy5HZ6x5U1yXXvLtjrEllJp5vY/&#xA;VW0lIZ1QsQhJAGzrRh7HLgbDjSjRpNsLFxrTbriryjz/AOZvzOsfM2kt5elhWwkmjtdR0y4gDrGG&#xA;Z+VzJOD6hi4U+wPvOxxxqADUtnJOmJFx9T1cEEVG4PQ5kOM7FXYq7FXYq7FWJ+fPODaDap9VvdPg&#xA;uqlpkvXcsIwB8SxRVkPWlaGngchKVNWSdcqY55O8zebdc10cNasby2g3ntkiaOqMTRo1JVm2PUnw&#xA;2yMSSebXCcpHmHp+WuS7FXYq7FXYq7FXYqxzWvNV5ZeZdL0Sy04XzXp5XkwnSM28XIAuYyGZtiWp&#xA;tWm3elU8oEhHqW7Hh4omXcyPLWl2KuxV2KuxV2KuxV2KoWPU7J7g24kpMGK8CCN1JHWlO2KLfP8A&#xA;+efmzQpfM6z6Xqkjavo8Fq1m9rKWiWYXMnrRVQ8RJwZWb5Ae2V8R4x/N3tmDDgN/V0fQWm6hbajp&#xA;9rqFqxa2vIkngYgqSkih1JB3Gx6ZYxBfN3/ORlp63mb9JJAkfoOunyyIDykIt47lGkPTkPWZR7Ae&#xA;GU5IHm5WDKAKOyfaTrOueZfLGmDR/MF3b6ha20MEkFqPVIMKBWDwW0iyirftuu49sYGUdzZackYy&#xA;ncTXx+1XuPMfnSCxuLMa/wAy6tBJM0iCaFh8JYFvTZHqO5NDmP4xEuoYTw5xdcEx8j+hG+W/zO8y&#xA;aPpJ/wAQ3EN5ZQhkh1WVHWR5GbkqyMhKNRTQcVFdtzvlmTPKtgz0uMyP7z0/EJ55Z85Wvmy8up+c&#xA;Ur2aRikYbiBIXoaOKgkxthwgyPFINuciA4Yl6HYb2cXyzJcYIjFXYq7FXYql+s6/pWix2smpTehH&#xA;eXMdnC5ViPWmqEDEA8QSPtHYd8UE0xjzDZQeZibzype6bc3tuxt7q64xXfpsqkqpIJ4n498iR3Nc&#xA;43yQ3l3yT5q0jVY76bW1ktwSbqJoI41dDu32GoKdvD7sAiQebGOOQN2y/TNUku7m7ikVUEL0h41P&#xA;JB+1XvgxyJJsVTmZIRAFG7CY5Y1OxV2KuxV2KoWe9kjcqLeRgP2gNvwrih4pJ5M1/wDTWtajLqdt&#xA;+krgme19KWkqS+us6j4wvA8U4LtQV8BmCNNPiJJ5/rc86qHCABy/Ui/J35eavZ+c5fOGpXJ1DVbk&#xA;SlSKIYJ5wyuyovqqypGaJ8XQ/Z2zPvanX9bRTeRPzIOprdLq8iSuwpdNPKgrSg5RjrRVA3X2zD4M&#xA;tqNPju+Kf7f1PXYEdIY0kcyyKoDyEAFiBuaDxzLZBfirsVdirsVSnVb7XYJWFlaR3EagNy5VYA16&#xA;pVO47VynJKY+kW3Y4wP1GnkXnfWvOjXOr+tpi3WnT26wx2KCSGd2kXi7cVWaQ9etYxQdzua45roS&#xA;2P4/HVnPTjcjcfj8dGMax+Wt40ema1bwRacIIy1/ZOkUK8VPL92sAloxWtS8jn3A+EQnIgUR8fxT&#xA;jZ9MJxJBA25d33st8i31zPq2laXFrc2nRRVBtlFYzLVpHhj5ckPOp+Nl7dK0w4jvVuuwRox9R5Hb&#xA;8bJj+Yx8tQXmq23mq2nNhe3kN5avEsQMiQWUcL+nLK8aoRIwBb6O4zOq3PI73h1z+h7M6Brmg3Cx&#xA;zqYBqMDXFXiugFZmACo6RNvT4mpTc1wEU1EU+pLHTrnT9V0eC5kSW4c6pcSvEpVOVzOJ+Khixovq&#xA;U64tySfmpo95r+p+WtGXTHvdP+upc385h5wxxqwU8nOw+AuSPlmNnjIkAcr3b8Moi+LnWzF7LzPo&#xA;mn+erm70jyzqEfly6tY4JHs7aFIZrgXMqwXCESKPSlAZItwWOwXpmUI0Ggmzu9rRFRQiCiqKADIp&#xA;bxV2KuxV2KvMPzZ8oeZNbsLi4S8WSK2vrebTdMfisJjSDjIzsE5+o0kj0+KlKfQhrnEkPnLzNe+b&#xA;/K2pXPlR9Vmhjtljnls7OeRbYNOquy+mpVeVJNzTfLIhAFJr5E1TTLLVzFqN7+mV1KP6r9VKycUW&#xA;RuSsZZKcXTf7NaVONcQ7mM5mJ23ARfnv81XksLbR/Kt3daY9rdesLyKZonpxdTEpUrIys0laGg2G&#xA;2Qhi4ettssxnuQI+59LflnqWo6n5C0S/1KRpr2e2VppZBRm3IDHYblQN++J5pDJsCXYq7FXYqo3r&#xA;OLZwn9444JvQ1bbr2xUvmPz95Q1065pmo6rpLevdajFaz+qimGX1zQKZDK0bAkUALbDuBloLhxEt&#xA;wXsv5dRapZ6jrOlXtpLDFDe/WtPuBE62z2kttEioknH0y0boQVBysuUGcXKkxqQCSjq1AKnYiv4Y&#xA;GSrirsVdirsVdiqgFdppGVypWi9AQaCu/wDwWKsL87+bPL9tcRaNdXlsdSvmSC3hJJoxlAJNA4Q9&#xA;viI+eU54mUaHMt+mkIz4jyC/QtB8u6pdXMrwLe2sMwhhLlmiI9JZK8SeD1Dg13yvDgAJPyZ6jMZR&#xA;A8t/miNO1PyvF54bS7Wa2W9ht3hjt04h148GEYoP2QH+HtvlwA4vg4/D6fin115b0S81VNVvLOO6&#xA;vYolhgeYCQRqrM1Y1aqoxL7sBU7eGWWxY7rP5UeWNb0O70TVFaTTpbuS7sEhpE9n63F3jhb4vhaU&#xA;M/SnxUpQDDaKTO28l21vpumWMepagTpUbxQ3jzK9w6SbESyMhr0FKUpTG1pX/wAIaOxrO13dV+0t&#xA;xe3cqH/nm0pj+5cbWkXZaBodjG8Vnp9vAkrJJKI4kXm8Z5I70HxMpFQTvgtKPxV2KuxV2KuxVC6n&#xA;Yi+tGt+fAkghqVoR7bYoIYP5z/I7yZ5svodSvfWtdSjT0p7qzZIzOnIECYMknIqBxVhQ02qQBQiS&#xA;0oQ/kD+X1jb10yy9PUlKtDf3ck90YyCDyERljj5U6Gmx33wSJI2KgDqLZtpvljy3paFNN0q0slII&#xA;b6vBHESCKGpRQTXvimkzxV2KuxV2KuxV2KoPVtF0jWLT6nqtnDfWvIP6M6LIoZejAMDQivXFSEWi&#xA;KiKiiiqAFHXYfPFW8VdirsVdirsVdirqAV9+uKpVqvljRdS0m40ua2SO2uFdG9JEVl9T7TLVSAT4&#xA;0xVdoXl/TtGtjBZxsgPHlydnr6a+mrUYlQeAANAK4qiF0+l99Z57bkJTuRTrXFFIvFLsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdiriQBU9MVQmm6vpOqQtPpl7BfQIxjeW2lSZA4AJUshYVoRtiqLxV2KuxV2KuxV2KuxV2Kux&#xA;VJYvOvlOVlVNVtjy+y3qAKffkfhp9OGix4x3ptb3FvcwpPbypNBIOUcsbBkYeIYVBwMlTFXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYql2s+Y9A0SOKTWNRt9PSdikLXMixhmG548iK074qmCOjo&#xA;rowZGAZWU1BB3BBGKt4ql/mG2tbrQr+0u+f1a7gktpvSPF+EymM8WNaGjdcVfP8A+YXk6Hy7+Tk2&#xA;k+X1naW3v7SSV7dWEkpZZAzyFCzNXl8htTbIYoyEiSbtsy5ImIERVfa8QitfPbxNLTVFVWC8yLgJ&#xA;yPReXQE02y9ofdvl/wAyaH5h05NR0W8S9spPszR1+4hgGB9iMrZAgplil2KuxV2KuxV2KvP9d/OD&#xA;TdG87DytcWMjyc4VNyjg7TIrlvTClqKGyXDsxt515Lj1DVDp+kWkUYU2q/Vb2dpY4pxEg3SkLMOS&#xA;/EKj+2qOqiZmHUMMnZ8uHjsUXuvl/TpdN0SxsZipmt4USUoSV5gfFxJCkjl0qBlhbIihSYYEuxV2&#xA;KuxV2KuxVbJJHFG0krBI0BZ3YgKANyST0xJpIF8mN6r5/wDLdgun3Av4bq11Bils1s6SiQ1IqrKS&#xA;p3Ujr44LYSkBz7k+sNQs7+2W4tJRLE3cdQfAjqD88JCxkCLCIxZOxV2KuxV2KuxV45r93+cNr59m&#xA;aK+H+G7e7SaKJhCqvbEq7R/u0Mp2qvxb4JSoWxjGRlVon8ytb8q6vDp94rxXoTktus8DtxLH94UR&#xA;l5lvgoaKdhkJRlxWDs2QywOOq3vmyr8qooW8qJfwSSPBfzSy28cvWKJHMUcdKClBHuOx26AZYWAZ&#xA;hilI/N19q1rprjT9JfVOaSGXhNFD6fAAqT6hBap/l8MjMkDYM4RB5mnliefPPdpexwaX5dP1u5UO&#xA;IPrUMvqIPi2VA7fZ8OgzGOWd0Nvt/U5MMOMCyb+z9BQHnWH8+/OGm2ts/lu3ggtr6G9iNvMtrOph&#xA;LUBeW5VujdVVTl8JTPMU0ZIwHI2zXyTofm/SdIgi0DTNI0jTpv3lxbTTXVxIJvsycSNuNV2+I4Kl&#xA;5MYxxi+b0eL1fST1Spl4j1CgIUtTegJJpXLWC7FXYq7FXYqslmjiXk5IXxAJ/VXFWK+boLi9hFzo&#xA;9xELqJWMsDW/rNcUHwRqzS26xmv7TVyMo2KTCQjK6t8++ZvKP5naLpdl5gulnt47SaJVs4ppJ/q7&#xA;oS0ciqOcaJy2ADGny2FZx0bapzlW52+x9G+R/N3+JvL1nqRs5bWeVALqF1ACSLs1KmvE9V70y5lG&#xA;QIZFiydirsVdiqTa/wCb9B0IBb+4pOw5JbRjnIR8h0+bEZCWQR5tOXPCHMvLta/NLzJqXnXRLfQv&#xA;VtNIYyCeEJHJJLLxPEzAhqR9BRSO55V45WcpMTwjcJ0eohlnR2C78wdV81an5fnsdTuIdPF3+69G&#xA;2JdAyMGJatHZTxp/DLDIAepxsmacN5fY8f1BfMekahpNzdol/p2nlY7KOAkwoqg8VK/aVwOhavzN&#xA;MrFQ9XTm2+Mc9Dmapn3ln8x9WtdbT6oqQW83wmOU8gxG4D0Pfpt9+V49Zxzo7RczJoDixmQNyHye&#xA;taf+ZOlyFI7+CS1kP2pFHqRD5kUYf8DmcYOHHUg82YKwYBgag7g+2Qcl2KuxV2KuxV4158/NSy8t&#xA;a9q0NrG+oyGSMzxzKpWF0iWNxDV90+BSQV2bka06UDUA5OBvlpz4Rl1/Q868x3zavcS6jc3E9iV0&#xA;cXUSLMYiWnnbmDxIUlhxHHuaDMkEHdwhEx2L3r8oLQWv5aaAnNpDLbfWWdzUlrl2nbc/5UhwS5to&#xA;5MwwJUri1tblVW4iSZUYOgdQ3Fx0Za9CK9cVeIee7W9bzLb2+nViunvbeHTnTb05SWKmvYcUbNdq&#xA;QeMV5Ox0sh4Zvze5oGCKGPJgAC3Sp8c2Lrkv8vGukQn3k/5ONiFTHFXYq7FXYq7FXYqh7Prcf8Zm&#xA;/UMVSH8xJJ08tSemBwaWMTE9Ala1+hgMlHm0aj6VD8rpHk8pwPJ/eGSUSVFDyWVlbb5jGXNdP9AZ&#xA;bkW92KuxV2KsB/Mf8uZtekXVNKdU1SNOEkLmiTKOm/RXHSp65RlxcW45uFqtLx+oc3ltvJrPlbUA&#xA;Lq3ltLkq0brOrKrq32qOpFR4FW+nMeJMC62JlilZCQeZr3zHLoNhp2lqZZ45pprm85R8+LECKOMy&#xA;UZUA/Z5MenxHMkZcct5Ob+ZxTAEhySTTNb17S5hHr0b+jOeMU4KOValKN6ROxyMoRl9HNqnjhLfG&#xA;dw9P0jyhea/p9u8WkCZJ0DLdcREnE7qyy/DXb+U5cMUTH1AW5ODJnFEE29A8s/lhDYiJ9XuTfNF9&#xA;i3JJQGtRyb4S9Pl9+GAMdrsOVLHGW5AEvJneFsdirsVdiqC1rUn0zSbvUEtZr42sbS/VLYBppAoq&#xA;QikrU07fdir54PlPzH5jhs9Qv7caVoXmO4ub7VtcmljX6sh9RYopYZQvHk5JVuR5FwPhpXKMOAxJ&#xA;J525GXOJChdUi/Jvl201HXRZQavoqjR5LnTUuJJmumvhIkRhZLF5aeny3+GWnOoA2zIEBEbONKRk&#xA;d3uHk7y4vlryxp+hLctdiwj9P6w68S5LFieNW4j4thU0GJKhOcCUt8xafqGo6RNZ6fevp9zMUAu4&#xA;iBIihgW4EhgCyilaYqwWT8sNXfzdo2rz6lPNa6c8LSRqUZ5HhD/vpZG9OpfkBJxj33pSuwoXaN+/&#xA;Z6PcW4mUD1JIyOjRsVP9D9OFKGs9Ols/TjiuWa1TkTE6qWJap+2AtNzXpiqOxV2KuxV2KuxVpiQp&#xA;IFSOgHf78VQ9oJleUPEUDuXDEqRuBtscVQPmqw1DUNEnsbGKGWW4orC4laFVUfFyDJFOSagbcfpw&#xA;G+i8MTtLkpeU9Hv9K0xLW5WFHLyySrDI8oDSSM9VdkirXlU/CKdMRdb814Yj6eSeYVdirsVdirsV&#xA;Urq0tbuFoLqGO4hb7UUqh1PzVgRgItBiDsWL3v5WeS7puS2bWrE1P1eV0U/7CpUfQMrOGJcaWjxn&#xA;oidM/LnyZp0Txx6XDceoOMjXQ+sFh8pOQH0DJRxiPJnj08IcgyNVVFCIAqqAFUCgAHQAZNvbxV2K&#xA;uxV2KuxV2Kse1zyTpev3zSa40l9pwWIW+lNJJHbLJGzM0jpG6rKzVX7YNKe5w2imO6N+VXlQ3+uR&#xA;33l6KCEakt1pN5FxgdYzbw7QSW7rNGI5o2NPhFTUYbWmY6Bpl9ptk9rd6hJqVJpGt5phSRIWascT&#xA;NVmkKLtzY1bvkSl//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:31e96f06-1bf6-ef40-bc02-b34a071ba9d9</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:31e96f06-1bf6-ef40-bc02-b34a071ba9d9</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:53225452-f5c1-4e33-aa6d-e78473fe976b</stRef:instanceID>
            <stRef:documentID>xmp.did:618ddcaa-8f74-d445-ae19-311eecaf2f0d</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:18679899-7308-492d-9ce9-f6750659bfeb</stEvt:instanceID>
                  <stEvt:when>2020-02-12T13:08:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b557bb6a-57fd-48e2-9b90-c39d5801fe32</stEvt:instanceID>
                  <stEvt:when>2020-02-26T22:08:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c053b1ca-f410-41b1-a639-3a8708ce8501</stEvt:instanceID>
                  <stEvt:when>2020-02-27T12:12:30+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e28cff4b-0b69-4127-bef2-3a1db65e4509</stEvt:instanceID>
                  <stEvt:when>2020-02-28T12:28:38+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:618ddcaa-8f74-d445-ae19-311eecaf2f0d</stEvt:instanceID>
                  <stEvt:when>2021-03-22T06:55:31+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:31e96f06-1bf6-ef40-bc02-b34a071ba9d9</stEvt:instanceID>
                  <stEvt:when>2021-03-24T11:35:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
105.653 274.395 mo
105.653 301.857 132.122 318.174 164.773 318.174 cv
197.423 318.174 223.892 301.857 223.892 274.395 cv
223.892 246.932 200.351 229.743 167.7 229.743 cv
135.049 229.743 105.653 246.932 105.653 274.395 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.552941 .709804 .701961 rgb
f
166.152 262.953 mo
192.75 262.953 221.639 257.817 219.629 252.514 cv
219.074 251.338 217.683 251.563 217.381 251.786 cv
217.178 251.937 217.559 252.245 217.852 252.52 cv
217.852 255.622 198.248 261.386 166.152 261.386 cv
134.056 261.386 114.072 255.048 114.072 251.947 cv
113.949 251.022 112.706 251.02 112.577 252.514 cv
112.577 258.455 139.554 262.953 166.152 262.953 cv
.239216 .313726 .290196 rgb
f
164.921 305.988 mo
186.918 305.988 219.629 302.071 219.629 295.43 cv
219.629 294.059 218.049 294.328 217.655 295.43 cv
217.361 297.024 197.609 304.135 164.773 304.135 cv
131.936 304.135 112.941 297.709 112.18 295.857 cv
111.629 294.998 110.319 294.164 110.185 295.43 cv
110.185 302.071 142.924 305.988 164.921 305.988 cv
f
164.773 284.043 mo
187.013 284.043 225.839 278.768 225.839 272.127 cv
225.717 270.99 223.661 271.072 223.862 272.712 cv
223.882 274.872 196.923 282.335 164.773 281.98 cv
128.047 281.573 105.726 275.068 105.726 271.964 cv
105.653 270.78 104.091 270.493 104.003 271.964 cv
104.003 278.606 142.8 284.043 164.773 284.043 cv
f
164.772 318.174 mo
144.009 318.174 125.745 311.574 115.199 299.707 cv
115.199 299.707 li
125.745 311.574 144.009 318.174 164.773 318.174 cv
164.772 318.174 164.772 318.174 164.772 318.174 cv
164.844 318.174 mo
164.848 318.174 164.854 318.174 164.858 318.174 cv
164.853 318.174 164.849 318.174 164.844 318.174 cv
164.928 318.174 mo
164.932 318.174 164.935 318.174 164.939 318.174 cv
164.936 318.174 164.931 318.174 164.928 318.174 cv
165.087 318.174 mo
165.089 318.174 165.094 318.174 165.096 318.174 cv
165.093 318.174 165.09 318.174 165.087 318.174 cv
165.17 318.173 mo
165.172 318.173 165.174 318.173 165.176 318.173 cv
165.174 318.173 165.172 318.173 165.17 318.173 cv
165.332 318.173 mo
165.332 318.173 li
165.332 318.173 li
165.41 318.172 mo
165.414 318.172 li
165.41 318.172 li
.865006 .912372 .910004 rgb
f
164.773 318.174 mo
144.009 318.174 125.745 311.574 115.199 299.707 cv
125.215 303.719 148.179 305.988 164.921 305.988 cv
168.223 305.988 171.767 305.899 175.404 305.727 cv
176.225 309.996 177.012 314.007 177.682 317.284 cv
173.727 317.845 169.625 318.145 165.414 318.172 cv
165.41 318.172 li
165.384 318.172 165.359 318.172 165.332 318.173 cv
165.332 318.173 li
165.28 318.173 165.227 318.173 165.176 318.173 cv
165.174 318.173 165.172 318.173 165.17 318.173 cv
165.145 318.173 165.121 318.174 165.096 318.174 cv
165.094 318.174 165.089 318.174 165.087 318.174 cv
165.037 318.174 164.989 318.174 164.939 318.174 cv
164.935 318.174 164.932 318.174 164.928 318.174 cv
164.905 318.174 164.881 318.174 164.858 318.174 cv
164.854 318.174 164.848 318.174 164.844 318.174 cv
164.821 318.174 164.796 318.174 164.772 318.174 cv
195.697 312.485 mo
195.6 309.949 195.488 307.044 195.369 303.966 cv
202.957 302.953 209.731 301.577 214.178 299.88 cv
209.41 305.185 203.093 309.427 195.697 312.485 cv
.478431 .647059 .639216 rgb
f
112.323 296.064 mo
112.323 296.064 li
112.274 295.994 112.228 295.927 112.18 295.858 cv
112.18 295.858 li
112.228 295.927 112.274 295.994 112.323 296.064 cv
112.094 295.731 mo
112.094 295.731 112.094 295.731 112.094 295.731 cv
107.976 289.687 105.653 282.529 105.653 274.395 cv
105.653 274.395 li
105.653 282.529 107.976 289.687 112.094 295.731 cv
105.653 274.395 mo
105.653 274.382 105.653 274.369 105.653 274.356 cv
105.653 274.369 105.653 274.381 105.653 274.395 cv
.865006 .912372 .910004 rgb
f
164.773 304.135 mo
133.065 304.135 114.263 298.142 112.323 296.064 cv
112.274 295.994 112.228 295.927 112.18 295.858 cv
112.18 295.857 112.18 295.857 112.18 295.857 cv
112.153 295.815 112.124 295.773 112.094 295.731 cv
107.976 289.687 105.653 282.529 105.653 274.395 cv
105.653 274.395 li
105.653 274.381 105.653 274.369 105.653 274.356 cv
105.653 274.353 105.653 274.35 105.653 274.347 cv
109.155 276.88 117.854 279.133 128.102 280.828 cv
137.909 292.306 154.808 299.018 174.276 299.811 cv
174.536 301.183 174.795 302.549 175.053 303.897 cv
171.788 304.05 168.358 304.135 164.773 304.135 cv
195.289 301.892 mo
195.243 300.717 195.198 299.527 195.152 298.326 cv
205.539 296.328 214.725 292.456 221.851 286.93 cv
220.882 289.76 219.584 292.418 217.989 294.897 cv
217.859 295.029 217.749 295.191 217.674 295.379 cv
217.593 295.501 217.512 295.621 217.43 295.741 cv
216.031 296.993 208.24 299.858 195.289 301.892 cv
126.573 278.921 mo
113.307 276.71 105.864 273.812 105.728 272.014 cv
106.178 264.894 108.645 258.513 112.636 252.997 cv
113.03 254.591 115.366 256.073 119.095 257.38 cv
119.344 265.655 122.029 272.884 126.573 278.921 cv
119.085 255.29 mo
115.811 254.058 114.072 252.862 114.072 251.947 cv
114.042 251.723 113.947 251.552 113.817 251.445 cv
115.897 248.843 118.326 246.448 121.048 244.275 cv
119.853 247.724 119.17 251.4 119.085 255.29 cv
.478431 .647059 .639216 rgb
f
119.095 257.38 mo
115.366 256.073 113.03 254.591 112.636 252.997 cv
113.016 252.471 113.41 251.954 113.817 251.445 cv
113.947 251.552 114.042 251.723 114.072 251.947 cv
114.072 252.862 115.811 254.058 119.085 255.29 cv
119.079 255.563 119.076 255.837 119.076 256.111 cv
119.076 256.537 119.083 256.959 119.095 257.38 cv
.207843 .286274 .262745 rgb
f
164.921 305.988 mo
148.179 305.988 125.215 303.719 115.199 299.707 cv
115.199 299.707 li
114.164 298.543 113.204 297.328 112.323 296.064 cv
112.323 296.064 li
114.263 298.142 133.065 304.135 164.773 304.135 cv
168.358 304.135 171.788 304.05 175.053 303.897 cv
175.171 304.511 175.288 305.122 175.404 305.727 cv
171.767 305.899 168.223 305.988 164.921 305.988 cv
195.369 303.966 mo
195.342 303.283 195.315 302.59 195.289 301.892 cv
208.24 299.858 216.031 296.993 217.43 295.741 cv
216.446 297.184 215.359 298.566 214.178 299.88 cv
209.731 301.577 202.957 302.953 195.369 303.966 cv
112.18 295.858 mo
112.151 295.815 112.122 295.774 112.094 295.731 cv
112.094 295.731 112.094 295.731 112.094 295.731 cv
112.124 295.773 112.153 295.815 112.18 295.857 cv
112.18 295.857 112.18 295.857 112.18 295.858 cv
112.18 295.858 li
217.674 295.379 mo
217.749 295.191 217.859 295.029 217.989 294.897 cv
217.885 295.058 217.78 295.22 217.674 295.379 cv
f
128.102 280.828 mo
117.854 279.133 109.155 276.88 105.653 274.347 cv
105.654 273.561 105.679 272.783 105.728 272.014 cv
105.864 273.812 113.307 276.71 126.573 278.921 cv
127.061 279.571 127.571 280.206 128.102 280.828 cv
f
221.373 278.274 mo
220.47 278.274 219.34 277.916 218.011 277.271 cv
219.695 276.728 221.158 276.163 222.348 275.577 cv
222.562 276.275 222.777 276.973 222.99 277.665 cv
222.581 278.08 222.038 278.274 221.373 278.274 cv
.623529 .768627 .760784 rgb
f
215.883 276.102 mo
210.808 273.048 203.659 267.164 195.449 261.027 cv
204.646 259.793 212.291 258.063 216.418 256.133 cv
217.937 261.124 219.913 267.627 221.895 274.1 cv
220.532 274.696 218.492 275.385 215.883 276.102 cv
194.221 259.726 mo
194.223 258.115 194.227 256.571 194.233 255.292 cv
194.241 253.712 194.351 252.148 194.557 250.582 cv
194.679 249.658 194.717 248.703 194.647 247.761 cv
194.652 247.379 194.601 246.933 194.517 246.472 cv
204.146 246.849 212.829 247.192 213.68 247.255 cv
213.778 247.523 214.142 248.69 214.7 250.508 cv
214.699 250.508 214.698 250.508 214.698 250.508 cv
214.7 250.51 214.701 250.512 214.702 250.514 cv
215.038 251.608 215.445 252.939 215.905 254.45 cv
212.58 256.26 205.094 258.323 194.221 259.726 cv
194.278 251.751 mo
194.359 250.48 li
194.375 250.282 194.397 250.158 194.417 250.059 cv
194.418 250.062 194.419 250.064 194.42 250.064 cv
194.422 250.064 194.425 250.06 194.429 250.055 cv
194.432 250.051 194.436 250.047 194.439 250.047 cv
194.456 250.047 194.468 250.143 194.42 250.801 cv
194.371 251.203 li
194.278 251.751 li
f
195.449 261.027 mo
195.041 260.722 194.634 260.419 194.221 260.113 cv
194.221 259.984 194.221 259.855 194.221 259.726 cv
205.094 258.323 212.58 256.26 215.905 254.45 cv
216.069 254.989 216.24 255.55 216.418 256.133 cv
212.291 258.063 204.646 259.793 195.449 261.027 cv
.356863 .45098 .427451 rgb
f
218.011 277.271 mo
217.349 276.949 216.64 276.558 215.883 276.102 cv
218.492 275.385 220.532 274.696 221.895 274.1 cv
222.047 274.593 222.197 275.085 222.348 275.577 cv
221.158 276.163 219.695 276.728 218.011 277.271 cv
f
231.322 298.105 mo
231.322 298.105 231.322 308.269 231.322 311.821 cv
231.322 314.989 237.512 315.429 238.83 315.612 cv
240.149 315.813 242.346 315.685 246.338 319.256 cv
251.74 323.156 265.64 321.27 265.914 316.161 cv
266.024 314.11 264.669 312.334 262.746 310.851 cv
259.743 308.506 255.33 306.895 253.096 305.98 cv
250.916 305.101 248.206 301.511 246.192 297.556 cv
244.8 294.864 243.72 291.989 243.335 289.718 cv
242.383 284.096 231.322 298.105 231.322 298.105 cv
.239216 .313726 .290196 rgb
f
254.622 321.339 mo
251.445 321.339 248.32 320.687 246.338 319.256 cv
242.346 315.685 240.149 315.813 238.83 315.612 cv
237.512 315.429 231.322 314.989 231.322 311.821 cv
231.322 309.516 231.322 304.426 231.322 301.137 cv
231.765 301.31 232.296 301.39 232.889 301.39 cv
236.709 301.391 243.118 298.09 245.102 295.263 cv
245.435 296.03 245.801 296.8 246.192 297.556 cv
246.174 297.556 li
246.174 297.556 243.335 298.123 241.339 300.596 cv
239.362 303.068 236.706 304.661 235.882 304.862 cv
235.058 305.046 233.245 311.345 235.882 312.169 cv
238.538 312.993 241.632 313.488 245.697 315.136 cv
247.311 315.794 250.848 316.346 254.327 316.346 cv
259.654 316.346 264.84 315.049 262.746 310.851 cv
264.598 312.279 265.923 313.979 265.921 315.934 cv
265.92 316.009 265.918 316.085 265.914 316.161 cv
265.74 319.396 260.105 321.339 254.622 321.339 cv
.192157 .258824 .235294 rgb
f
193.822 113.759 mo
193.822 113.759 200.917 107.635 197.481 102.898 cv
195.381 100.003 184.521 92.9326 177.586 94.5837 cv
170.652 96.235 163.736 99.9129 163.13 100.994 cv
160.727 105.285 157.867 108.64 158.362 111.424 cv
159.769 119.327 164.465 123.708 163.513 126.253 cv
162.561 128.799 193.822 113.759 193.822 113.759 cv
.376471 .231373 .196078 rgb
f
179.663 341.56 mo
181.22 343.355 186.933 343.556 190.706 345.241 cv
194.478 346.926 206.326 348.977 210.959 347.237 cv
211.948 346.871 212.809 346.267 213.431 345.534 cv
213.45 345.534 li
215.391 343.355 215.519 339.949 211.966 337.66 cv
211.93 337.642 li
211.856 337.605 li
210.996 337.055 209.897 336.579 208.578 336.195 cv
205.484 335.297 202.792 333.228 200.558 330.738 cv
198.708 328.65 197.17 326.306 196.016 324.109 cv
194.643 321.526 193.819 319.183 193.617 317.828 cv
193.031 313.982 180.414 322.882 180.414 322.882 cv
180.414 322.882 180.18 332.381 179.663 335.114 cv
179.289 337.095 179.251 338.807 179.663 341.56 cv
.239216 .313726 .290196 rgb
f
205.947 347.899 mo
200.532 347.899 193.462 346.472 190.706 345.241 cv
186.933 343.556 181.22 343.355 179.663 341.56 cv
179.083 339.969 179.22 338.22 179.445 336.595 cv
179.299 338.033 179.356 339.507 179.663 341.56 cv
181.22 343.355 186.933 343.556 190.706 345.241 cv
193.462 346.472 200.532 347.899 205.947 347.899 cv
207.942 347.899 209.712 347.706 210.959 347.237 cv
211.948 346.871 212.809 346.267 213.431 345.534 cv
213.431 345.534 li
212.809 346.267 211.948 346.871 210.959 347.237 cv
209.712 347.706 207.942 347.899 205.947 347.899 cv
179.663 335.114 mo
179.822 334.013 179.949 332.691 180.049 331.329 cv
179.944 332.903 179.816 334.305 179.663 335.114 cv
.803091 .822376 .816286 rgb
f
205.947 347.899 mo
200.532 347.899 193.462 346.472 190.706 345.241 cv
186.933 343.556 181.22 343.355 179.663 341.56 cv
179.356 339.507 179.299 338.033 179.445 336.595 cv
179.515 336.087 179.595 335.59 179.663 335.114 cv
179.663 335.114 li
179.816 334.305 179.944 332.903 180.049 331.329 cv
180.18 329.549 180.267 327.7 180.322 326.188 cv
180.932 326.518 181.813 326.661 182.849 326.661 cv
186.868 326.661 193.238 324.508 195.328 322.742 cv
195.539 323.187 195.769 323.644 196.016 324.109 cv
196.016 324.109 195.668 326.489 191.841 327.679 cv
188.014 328.87 185.065 332.569 184.828 334.803 cv
184.589 337.055 187.354 340.48 192.5 342.201 cv
197.396 343.839 203.618 346.157 207.271 346.157 cv
207.457 346.157 207.637 346.151 207.809 346.138 cv
209.824 346.01 211.948 345.736 213.431 345.534 cv
212.809 346.267 211.948 346.871 210.959 347.237 cv
209.712 347.706 207.942 347.899 205.947 347.899 cv
.192157 .258824 .235294 rgb
f
160.55 132.16 mo
160.55 132.16 161.415 131.702 162.17 132.024 cv
162.925 132.346 161.327 133.971 161.327 133.971 cv
160.55 132.16 li
.580392 .388235 .227451 rgb
f
161.711 133.54 mo
161.485 133.259 161.285 132.989 161.116 132.73 cv
160.92 132.306 160.768 132.117 160.645 132.117 cv
160.643 132.117 160.642 132.117 160.64 132.117 cv
160.803 132.046 161.167 131.91 161.575 131.91 cv
161.731 131.91 161.894 131.93 162.054 131.981 cv
161.829 133.394 li
161.789 133.444 161.75 133.494 161.711 133.54 cv
.447059 .258824 .129412 rgb
f
167.291 245.367 mo
167.974 245.47 211.714 247.109 213.68 247.255 cv
214.173 248.603 221.389 272.666 226.158 287.888 cv
226.608 289.335 227.029 290.687 227.443 291.942 cv
228.793 296.258 229.801 299.314 230.162 300.089 cv
232.111 304.32 246.384 297.2 245.68 293.418 cv
244.976 289.635 237.088 242.375 236.431 239.515 cv
236.102 238.086 235.721 236.586 235.263 235.019 cv
234.727 233.361 234.268 231.769 233.11 229.424 cv
231.595 226.374 228.883 224.292 225.839 223.511 cv
225.839 223.511 180.886 215.035 172.225 213.678 cv
163.468 212.326 155.278 218.31 153.926 227.067 cv
152.549 235.801 158.534 244.015 167.291 245.367 cv
.129412 .14902 .172549 rgb
f
194.371 251.203 mo
194.278 251.751 li
194.359 250.48 li
194.375 250.282 194.397 250.158 194.417 250.059 cv
194.419 250.068 194.423 250.062 194.429 250.055 cv
194.448 250.031 194.478 250.007 194.42 250.801 cv
194.371 251.203 li
139.514 224.919 mo
135.932 232.15 137.936 241.127 144.656 246.085 cv
145.468 246.684 164.368 256.089 166.902 257.394 cv
167.021 258.226 168.64 268.643 169.37 272.98 cv
170.833 281.645 178.432 322.783 179.539 325.379 cv
181.071 328.972 196.017 324.125 196.017 321.703 cv
196.017 319.282 194.329 279.34 194.221 270.728 cv
194.221 270.728 194.208 260.671 194.233 255.292 cv
194.241 253.712 194.351 252.148 194.557 250.582 cv
194.679 249.658 194.717 248.703 194.647 247.761 cv
194.671 246.022 193.513 242.943 193.578 243.229 cv
193.246 242.436 192.837 241.656 192.367 240.926 cv
192.177 240.62 191.782 240.077 191.723 240.004 cv
191.474 239.686 li
190.954 239.067 li
190.254 238.323 li
189.771 237.855 li
188.86 237.014 186.403 235.016 186.403 235.016 cv
182.484 231.902 173.385 223.841 173.385 223.841 cv
179.064 222.147 183.703 218.153 185.167 215.929 cv
184.779 211.189 155.567 206.161 142.99 209.313 cv
142.708 212.598 142.484 214.896 142.195 216.886 cv
141.787 219.699 140.776 222.371 139.514 224.919 cv
.215686 .247059 .282353 rgb
f
195.163 177.197 mo
196.382 178.162 197.553 179.129 198.843 180.09 cv
199.021 180.224 199.173 180.335 199.351 180.494 cv
200.388 181.252 201.499 182.031 202.882 182.913 cv
205.484 185.171 206.963 185.661 209.339 186.579 cv
212.006 187.529 215.819 188.625 218.339 189.149 cv
220.835 189.649 230.597 190.843 233.192 190.999 cv
233.92 191.051 234.541 190.531 235.019 189.656 cv
236.817 186.646 236.985 179.484 234.687 179.044 cv
234.687 179.044 217.942 174.288 216.319 173.42 cv
214.725 172.647 212.161 171.813 212.144 171.524 cv
212.144 171.524 202.833 160.685 200.965 158.576 cv
197.202 154.31 193.604 148.802 193.604 148.802 cv
190.005 144.454 183.275 138.702 181.747 144.16 cv
178.087 157.069 192.824 175.285 195.163 177.197 cv
.580392 .388235 .227451 rgb
f
136.867 160.69 mo
136.867 160.69 139.321 181.932 139.925 185.997 cv
140.255 188.176 141.226 193.524 142.105 198.047 cv
142.343 199.329 142.544 200.61 142.673 201.911 cv
143.093 205.573 143.112 209.272 142.746 212.935 cv
142.38 216.798 140.933 219.49 141.189 220.278 cv
142.221 223.338 147.619 222.733 154.656 222.128 cv
158.355 221.81 162.508 221.492 166.716 221.706 cv
166.771 221.724 li
167.943 221.761 169.115 221.853 170.287 222.018 cv
171.514 222.201 172.76 222.164 173.95 221.798 cv
179.059 220.205 186.109 217.018 185.175 215.938 cv
195.32 193.231 li
199.569 186.345 193.013 154.573 192.683 149.904 cv
192.61 149.244 192.464 148.622 192.244 148.073 cv
190.816 144.208 186.256 142.634 179.297 138.77 cv
178.693 138.44 178.07 138.092 177.429 137.707 cv
173.236 135.272 168.346 134.228 163.567 134.979 cv
149.192 137.232 139.175 141.645 138.113 145.399 cv
137.362 148.054 136.629 158.071 136.867 160.69 cv
.878431 .894118 .898039 rgb
f
217.618 188.992 mo
215.132 188.426 211.763 187.442 209.339 186.579 cv
206.963 185.661 205.484 185.171 202.882 182.913 cv
202.876 182.909 202.87 182.905 202.864 182.902 cv
202.87 182.905 202.876 182.909 202.882 182.913 cv
205.484 185.171 206.963 185.661 209.339 186.579 cv
211.763 187.442 215.132 188.426 217.618 188.992 cv
217.618 188.992 li
202.409 182.609 mo
201.444 181.984 199.642 180.803 197.903 179.656 cv
197.904 179.562 197.903 179.468 197.903 179.374 cv
198.211 179.613 198.523 179.852 198.843 180.09 cv
199.021 180.224 199.173 180.335 199.351 180.494 cv
200.267 181.164 201.241 181.85 202.409 182.609 cv
.891396 .841661 .800046 rgb
f
217.618 188.992 mo
215.132 188.426 211.763 187.442 209.339 186.579 cv
206.963 185.661 205.484 185.171 202.882 182.913 cv
202.876 182.909 202.87 182.905 202.864 182.902 cv
202.747 182.827 202.593 182.728 202.409 182.609 cv
201.241 181.85 200.267 181.164 199.351 180.494 cv
199.173 180.335 199.021 180.224 198.843 180.09 cv
198.523 179.852 198.211 179.613 197.903 179.374 cv
197.87 170.573 195.542 161.575 194.002 155.695 cv
194.49 156.878 200.489 171.361 202.931 173.414 cv
205.454 175.555 205.682 178.901 209.597 180.112 cv
212.854 181.127 217.914 183.994 224.743 185.8 cv
221.149 186.456 li
217.618 188.992 li
.517647 .32549 .180392 rgb
f
166.902 257.394 mo
166.902 257.394 177.033 247.978 179.298 247.978 cv
179.567 247.978 179.725 248.11 179.743 248.405 cv
179.913 251.195 166.902 257.394 166.902 257.394 cv
.0470588 .0627451 .0784314 rgb
f
175.196 297.556 mo
174.942 297.556 174.707 297.105 174.499 296.079 cv
172.77 287.568 179.821 273.546 179.821 273.546 cv
179.821 273.546 177.042 297.557 175.196 297.556 cv
.164706 .188235 .219608 rgb
f
178.062 314.357 mo
177.676 314.357 177.271 313.4 176.847 310.798 cv
175.54 302.781 182.082 286.833 182.082 286.833 cv
182.082 286.833 181.247 305.024 180.261 308.119 cv
179.594 310.211 178.867 314.358 178.062 314.357 cv
f
213.677 247.249 mo
213.677 247.249 221.847 235.223 224.505 235.223 cv
224.704 235.223 224.872 235.291 225.004 235.436 cv
226.889 237.52 213.677 247.249 213.677 247.249 cv
.0156863 .0235294 .0313725 rgb
f
170.288 199.287 mo
170.568 198.549 170.835 197.809 171.086 197.071 cv
172.699 196.42 173.93 195.715 174.536 194.951 cv
174.961 195.04 175.427 195.084 175.918 195.084 cv
179.213 195.084 183.596 193.088 183.596 189.122 cv
183.596 186.408 183.234 182.408 183.6 178.672 cv
183.967 174.955 183.25 171.77 183.6 168.6 cv
184.628 159.312 182.678 149.667 181.484 144.928 cv
181.836 144.897 182.128 144.825 182.348 144.709 cv
182.384 144.796 182.419 144.883 182.453 144.969 cv
182.655 145.519 182.834 146.094 182.989 146.694 cv
183.051 146.932 183.09 147.171 183.153 147.409 cv
183.153 147.409 li
184.162 152.083 185.55 159.006 185.589 162.411 cv
185.589 162.411 li
185.589 162.411 li
185.642 166.943 187.512 178.744 187.512 186.298 cv
187.512 187.759 187.442 189.061 187.275 190.121 cv
186.982 191.944 186.593 194.503 186.212 197.318 cv
180.294 198.089 174.869 198.764 170.288 199.287 cv
192.701 150.121 mo
192.692 150.042 192.685 149.968 192.68 149.898 cv
192.654 149.666 192.62 149.442 192.579 149.224 cv
192.623 149.445 192.658 149.672 192.683 149.904 cv
192.688 149.97 192.694 150.043 192.701 150.121 cv
.772549 .8 .807843 rgb
f
214.702 250.514 mo
214.701 250.512 214.7 250.51 214.698 250.508 cv
214.698 250.508 214.699 250.508 214.7 250.508 cv
214.701 250.51 214.702 250.512 214.702 250.514 cv
.0823529 .113725 .129412 rgb
f
217.209 251.961 mo
216.309 251.961 215.455 251.536 214.702 250.514 cv
214.702 250.512 214.701 250.51 214.7 250.508 cv
214.863 250.457 223.929 247.622 226.752 242.279 cv
227.089 241.642 227.249 241.367 227.261 241.367 cv
227.299 241.367 225.908 244.016 223.947 246.664 cv
221.986 249.313 219.454 251.961 217.209 251.961 cv
.0156863 .0235294 .0313725 rgb
f
227.443 291.942 mo
227.443 291.942 li
227.029 290.687 226.608 289.335 226.158 287.888 cv
230.063 282.352 230.859 261.505 230.348 258.274 cv
235.129 282.437 230.879 290.428 227.443 291.942 cv
f
160.095 135.402 mo
160.096 135.425 li
160.12 135.424 li
160.095 135.402 li
.580392 .388235 .227451 rgb
f
180.869 140.854 mo
180.019 139.988 178.923 139.76 177.472 138.543 cv
180.412 125.804 li
180.879 123.939 li
181.954 119.379 165.311 113.916 164.21 118.454 cv
161.43 135.9 li
156.153 137.333 191.326 151.865 180.869 140.854 cv
.956863 .666667 .509804 rgb
f
142.683 201.873 mo
143.1 205.545 143.109 209.265 142.753 212.936 cv
142.383 216.8 140.929 219.499 141.194 220.28 cv
142.221 223.341 147.632 222.733 154.683 222.125 cv
158.378 221.807 162.524 221.488 166.725 221.698 cv
166.141 221.637 163.566 220.61 161.907 219.164 cv
160.456 217.948 159.709 216.398 161.552 214.909 cv
164.108 212.844 167.586 206.471 170.102 199.769 cv
171.21 196.923 172.12 194.016 172.684 191.372 cv
172.837 190.71 172.967 190.074 173.051 189.465 cv
173.109 189.22 173.141 188.952 173.174 188.708 cv
173.984 182.956 173.495 182.068 172.729 181.003 cv
172.704 180.98 li
172.281 180.378 171.758 179.733 171.344 178.091 cv
170.196 173.521 172.88 168.791 173.005 166.077 cv
173.152 163.337 170.548 155.087 169.745 151.825 cv
168.966 148.562 172.788 147.436 173.406 144.474 cv
169.924 140.868 163.195 135.913 161.116 132.73 cv
160.866 132.189 160.687 132.031 160.55 132.16 cv
159.57 133.138 158.64 134.137 157.579 134.951 cv
156.702 135.632 155.742 136.149 154.623 136.411 cv
144.18 138.738 137.531 142.647 136.633 145.746 cv
135.876 148.402 136.634 158.07 136.866 160.689 cv
136.866 160.689 139.005 179.165 139.792 184.941 cv
139.842 185.373 139.888 185.733 139.929 185.996 cv
140.255 188.175 141.233 193.528 142.112 198.041 cv
142.353 199.235 142.525 200.457 142.646 201.658 cv
142.683 201.873 li
.580392 .388235 .227451 rgb
f
140.248 187.969 mo
140.204 187.963 140.161 187.956 140.118 187.95 cv
140.008 187.389 139.9 186.838 139.796 186.306 cv
139.845 186.235 139.893 186.161 139.939 186.084 cv
140.014 186.578 140.12 187.22 140.248 187.969 cv
.891396 .841661 .800046 rgb
f
171.725 195.074 mo
172.106 193.807 172.43 192.563 172.684 191.372 cv
172.684 191.372 li
175 192.684 175.39 193.875 174.536 194.951 cv
174.509 194.946 174.483 194.94 174.456 194.934 cv
174.305 194.899 174.098 194.882 173.843 194.882 cv
173.325 194.882 172.603 194.951 171.725 195.074 cv
140.251 187.969 mo
140.25 187.969 140.249 187.969 140.248 187.969 cv
140.12 187.22 140.014 186.578 139.939 186.084 cv
139.94 186.083 139.941 186.081 139.941 186.08 cv
140.016 186.574 140.122 187.218 140.251 187.969 cv
.784314 .752941 .717647 rgb
f
171.086 197.071 mo
171.313 196.402 171.526 195.735 171.725 195.074 cv
172.603 194.951 173.325 194.882 173.843 194.882 cv
174.098 194.882 174.305 194.899 174.456 194.934 cv
174.483 194.94 174.509 194.946 174.536 194.951 cv
173.93 195.715 172.699 196.42 171.086 197.071 cv
.690196 .67451 .647059 rgb
f
164.26 199.128 mo
164.179 195.441 163.264 190.868 163.264 190.868 cv
159.146 189.522 145.634 188.741 140.251 187.969 cv
140.122 187.218 140.016 186.574 139.941 186.08 cv
140.617 184.955 140.99 183.302 141.459 181.283 cv
141.528 181.538 141.588 181.772 141.632 181.98 cv
141.632 181.98 141.603 181.554 141.549 180.894 cv
142.245 177.918 143.192 174.204 145.588 170.238 cv
147.723 166.194 148.053 160.956 147.527 156.231 cv
150.028 164.548 148.272 173.015 147.247 180.269 cv
145.758 190.804 167.537 188.457 172.684 191.372 cv
172.43 192.563 172.106 193.807 171.725 195.074 cv
171.526 195.735 171.313 196.402 171.086 197.071 cv
169.202 197.831 166.797 198.515 164.26 199.128 cv
.517647 .32549 .180392 rgb
f
120.218 193.374 mo
120.18 192.748 li
120.152 192.127 120.149 191.5 120.171 190.878 cv
120.297 189.532 li
120.4 188.673 124.892 170.429 126.383 166.786 cv
127.876 163.146 133.621 150.222 133.677 150.113 cv
136.19 145.236 140.586 137.276 144.997 146.512 cv
147.362 151.463 149.491 162.845 145.588 170.238 cv
140.372 178.872 142.02 186.314 138.192 187.539 cv
138.481 187.667 139.092 187.793 139.906 187.918 cv
132.298 189.334 126.391 191.662 120.276 194.934 cv
120.264 194.481 120.255 193.98 120.218 193.374 cv
.580392 .388235 .227451 rgb
f
125.23 176.906 mo
125.323 170.01 137.563 150.28 137.563 150.28 cv
137.563 150.28 128.199 169.487 125.23 176.906 cv
.517647 .32549 .180392 rgb
f
126.186 183.963 mo
125.23 176.906 138.656 150.68 138.656 150.68 cv
138.656 150.68 129.897 174.361 126.186 183.963 cv
f
142.209 177.239 mo
141.9 174.096 138.941 166.698 141.464 164.996 cv
141.609 164.898 141.74 164.852 141.858 164.852 cv
143.788 164.852 142.209 177.239 142.209 177.239 cv
f
141.632 181.98 mo
141.588 181.772 141.528 181.538 141.459 181.283 cv
141.488 181.155 141.519 181.025 141.549 180.894 cv
141.603 181.554 141.632 181.98 141.632 181.98 cv
.462745 .27451 .145098 rgb
f
141.459 181.283 mo
140.808 178.916 139.225 174.773 140.059 173.632 cv
140.116 173.554 140.172 173.518 140.227 173.518 cv
140.874 173.518 141.362 178.61 141.549 180.894 cv
141.519 181.025 141.488 181.155 141.459 181.283 cv
.517647 .32549 .180392 rgb
f
129.025 190.918 mo
129.496 190.575 129.981 190.188 130.484 189.714 cv
132.593 187.731 134.824 187.309 136.34 187.309 cv
137.462 187.309 138.192 187.539 138.192 187.539 cv
134.866 187.625 132.614 189.121 131.472 190.056 cv
130.643 190.329 129.828 190.616 129.025 190.918 cv
f
136.289 188.686 mo
136.451 188.53 136.583 188.388 136.754 188.228 cv
136.754 188.228 136.669 188.373 136.526 188.625 cv
136.289 188.686 li
f
187.275 190.121 mo
186.224 196.661 183.938 212.7 185.174 215.936 cv
185.174 215.936 200.918 228.461 197.594 204.426 cv
197.593 204.403 li
197.496 203.611 197.374 202.797 197.225 201.936 cv
196.372 197.058 196.26 192.039 197.222 187.196 cv
200.094 172.45 192.978 153.987 192.68 149.898 cv
192.155 145.242 188.557 143.418 182.192 140.085 cv
181.342 139.605 178.611 138.358 177.661 137.836 cv
177.472 138.543 li
180.234 140.041 182.42 144.095 182.989 146.694 cv
183.051 146.932 183.09 147.171 183.153 147.409 cv
184.162 152.083 185.55 159.006 185.589 162.411 cv
185.652 167.82 188.303 183.583 187.275 190.121 cv
.580392 .388235 .227451 rgb
f
173.051 189.465 mo
170.204 187.56 161.585 181.319 159.998 174.698 cv
158.006 166.579 150.729 145.492 150.729 145.492 cv
150.866 144.943 151.054 144.69 151.289 144.69 cv
153.4 144.69 159.293 165.019 165.329 174.542 cv
167.814 178.451 170.834 180.031 172.704 180.98 cv
172.729 181.003 li
173.216 181.68 173.591 182.286 173.592 184.115 cv
173.592 185.163 173.469 186.613 173.174 188.708 cv
173.141 188.952 173.109 189.22 173.051 189.465 cv
173.051 189.465 li
.541176 .34902 .2 rgb
f
183.153 147.409 mo
183.09 147.171 183.051 146.932 182.989 146.694 cv
182.834 146.094 182.655 145.519 182.453 144.969 cv
182.692 145.581 182.874 146.167 182.989 146.694 cv
183.051 146.932 183.09 147.171 183.153 147.409 cv
183.153 147.409 li
183.153 147.409 li
.690196 .67451 .647059 rgb
f
177.91 138.805 mo
177.873 138.783 177.836 138.76 177.798 138.738 cv
177.69 138.67 177.581 138.605 177.472 138.543 cv
177.472 138.543 li
177.619 138.623 177.765 138.711 177.91 138.805 cv
.784314 .752941 .717647 rgb
f
183.153 147.409 mo
183.153 147.409 li
183.09 147.171 183.051 146.932 182.989 146.694 cv
182.874 146.167 182.692 145.581 182.453 144.969 cv
181.942 143.578 181.287 142.352 180.522 141.319 cv
180.486 141.228 180.442 141.133 180.391 141.036 cv
179.798 140.034 179.235 139.604 177.91 138.805 cv
177.765 138.711 177.619 138.623 177.472 138.543 cv
177.472 138.543 li
177.661 137.836 li
178.611 138.358 181.342 139.605 182.192 140.085 cv
183.659 141.363 184.821 142.945 184.705 143.484 cv
184.701 143.445 184.699 143.423 184.699 143.423 cv
184.699 143.423 183.919 143.857 183.597 145.178 cv
183.276 146.223 183.153 147.409 183.153 147.409 cv
.517647 .32549 .180392 rgb
f
186.212 197.318 mo
186.593 194.503 186.982 191.944 187.275 190.121 cv
187.442 189.061 187.512 187.759 187.512 186.298 cv
187.512 178.744 185.642 166.943 185.589 162.411 cv
185.589 162.411 189.766 183.397 190.598 186.754 cv
190.952 188.173 192.537 191.966 194.307 196.246 cv
191.535 196.618 188.823 196.978 186.212 197.318 cv
.447059 .258824 .129412 rgb
f
186.479 147.206 mo
184.896 146.657 183.882 145.992 183.596 145.183 cv
183.596 145.181 183.597 145.179 183.597 145.178 cv
183.818 144.458 184.133 143.804 184.567 143.65 cv
184.643 143.62 184.688 143.563 184.705 143.484 cv
184.759 143.931 185.143 146.721 186.479 147.206 cv
f
183.597 145.178 mo
183.919 143.857 184.699 143.423 184.699 143.423 cv
184.699 143.423 184.701 143.445 184.705 143.484 cv
184.688 143.563 184.643 143.62 184.567 143.65 cv
184.133 143.804 183.818 144.458 183.597 145.178 cv
.4 .215686 .101961 rgb
f
166.954 148.057 mo
166.954 148.057 167.053 144.909 165.057 142.687 cv
163.192 140.626 157.48 137.711 157.579 134.951 cv
158.64 134.137 159.57 133.138 160.55 132.16 cv
160.58 132.132 160.611 132.117 160.645 132.117 cv
160.768 132.117 160.92 132.306 161.116 132.73 cv
163.195 135.913 169.924 140.868 173.406 144.474 cv
173.406 144.474 173.369 144.47 173.301 144.47 cv
172.969 144.47 171.887 144.567 170.653 145.705 cv
169.165 147.052 166.954 148.057 166.954 148.057 cv
.658823 .466667 .282353 rgb
f
178.795 139.482 mo
178.39 139.238 177.95 138.944 177.472 138.543 cv
177.585 138.611 177.694 138.675 177.798 138.738 cv
177.951 138.834 178.103 138.936 178.253 139.044 cv
178.437 139.18 178.618 139.326 178.795 139.482 cv
.858823 .74902 .682353 rgb
f
179.389 142.911 mo
177.494 142.911 173.848 140.778 171.121 135.027 cv
168.315 129.11 171.149 122.356 171.149 122.356 cv
180.412 125.804 li
177.472 138.543 li
177.472 138.543 li
177.472 138.543 li
177.472 138.543 li
177.472 138.543 li
177.472 138.543 li
177.472 138.543 li
177.95 138.944 178.39 139.238 178.795 139.482 cv
179.448 140.057 180.052 140.756 180.588 141.512 cv
180.841 142.384 180.331 142.911 179.389 142.911 cv
.937255 .556863 .388235 rgb
f
180.588 141.512 mo
180.052 140.756 179.448 140.057 178.795 139.482 cv
178.618 139.326 178.437 139.18 178.253 139.044 cv
179.08 139.638 179.844 140.403 180.522 141.319 cv
180.548 141.385 180.57 141.449 180.588 141.512 cv
.568627 .32549 .172549 rgb
f
178.253 139.044 mo
178.103 138.936 177.951 138.834 177.798 138.738 cv
177.836 138.76 177.873 138.783 177.91 138.805 cv
178.025 138.88 178.14 138.96 178.253 139.044 cv
.768627 .631373 .545098 rgb
f
180.522 141.319 mo
179.844 140.403 179.08 139.638 178.253 139.044 cv
178.14 138.96 178.025 138.88 177.91 138.805 cv
179.235 139.604 179.798 140.034 180.391 141.036 cv
180.442 141.133 180.486 141.228 180.522 141.319 cv
177.472 138.543 mo
177.472 138.543 li
.505882 .270588 .137255 rgb
f
170.115 124.456 mo
171.074 128.672 173.012 134.685 178.392 137.725 cv
179.679 138.453 181.239 138.511 182.623 137.99 cv
187.073 136.317 189.991 130.331 191.818 123.264 cv
192.982 118.763 194.848 111.751 193.492 108.343 cv
189.639 98.6606 190.291 100.293 178.448 99.1518 cv
166.427 96.728 157.07 118.071 170.115 124.456 cv
cp
.956863 .666667 .509804 rgb
f
193.926 112.604 mo
193.926 112.604 191.42 113.911 183.023 113.105 cv
175.197 111.536 176.132 112.116 174.568 118.22 cv
173.741 124.751 162.754 127.593 162.754 127.593 cv
162.972 126.221 li
163.208 124.743 163.136 123.243 162.746 121.798 cv
161.346 116.615 159.2 103.227 173.408 99.1585 cv
193.15 93.5051 195.417 109.311 193.926 112.604 cv
cp
.376471 .231373 .196078 rgb
f
169.996 119.723 mo
170.568 122.064 172.28 123.657 173.82 123.281 cv
175.359 122.904 174.782 120.371 175.571 118.36 cv
176.451 116.116 173.943 114.266 171.747 114.802 cv
169.373 115.383 169.424 117.382 169.996 119.723 cv
cp
.956863 .666667 .509804 rgb
f
211.856 337.605 mo
211.324 337.395 208.979 336.53 205.263 336.53 cv
204.124 336.53 202.856 336.611 201.473 336.817 cv
200.791 336.92 200.273 336.968 199.885 336.968 cv
197.005 336.968 201.413 334.272 200.558 330.738 cv
202.792 333.228 205.484 335.297 208.578 336.195 cv
209.897 336.579 210.996 337.055 211.856 337.605 cv
.192157 .258824 .235294 rgb
f
206.395 351.9 mo
206.395 353.978 210.745 355.663 216.112 355.663 cv
221.48 355.663 225.83 353.978 225.83 351.9 cv
225.83 349.822 221.48 348.137 216.112 348.137 cv
210.745 348.137 206.395 349.822 206.395 351.9 cv
cp
.819608 .831373 .815686 rgb
f
216.646 225.706 mo
211.861 328.661 li
211.716 331.797 214.14 334.457 217.275 334.603 cv
220.378 334.747 223.016 332.37 223.212 329.282 cv
229.699 226.421 li
229.927 222.818 227.19 219.713 223.587 219.486 cv
219.984 219.258 216.88 221.995 216.652 225.598 cv
216.646 225.706 li
cp
.878431 .894118 .898039 rgb
f
214.431 318.439 mo
212.827 345.895 li
212.721 347.712 214.108 349.271 215.925 349.378 cv
217.7 349.481 219.23 348.153 219.398 346.398 cv
221.988 319.017 li
222.185 316.933 220.656 315.084 218.572 314.887 cv
216.488 314.69 214.639 316.22 214.442 318.303 cv
214.431 318.439 li
cp
f
81.3304 322.759 mo
81.3304 325.093 85.6813 326.984 91.0485 326.984 cv
96.4153 326.984 100.766 325.093 100.766 322.759 cv
100.766 320.425 96.4153 318.534 91.0485 318.534 cv
85.6813 318.534 81.3304 320.425 81.3304 322.759 cv
cp
.819608 .831373 .815686 rgb
f
127.659 208.506 mo
92.3823 299.385 li
91.1785 302.486 92.7166 305.975 95.8175 307.179 cv
98.8817 308.369 102.328 306.875 103.571 303.848 cv
140.526 213.638 li
141.976 210.099 140.282 206.054 136.742 204.604 cv
133.202 203.153 129.157 204.847 127.707 208.387 cv
127.659 208.506 li
cp
.878431 .894118 .898039 rgb
f
97.0292 292.133 mo
87.7769 318.44 li
87.1371 320.259 88.093 322.253 89.9125 322.893 cv
91.6885 323.517 93.6327 322.615 94.3198 320.88 cv
104.553 294.939 li
105.367 292.876 104.355 290.544 102.291 289.73 cv
100.228 288.916 97.8958 289.929 97.0819 291.992 cv
97.0292 292.133 li
cp
f
281.481 296.346 mo
281.481 298.52 277.13 300.283 271.763 300.283 cv
266.396 300.283 262.045 298.52 262.045 296.346 cv
262.045 294.172 266.396 292.41 271.763 292.41 cv
277.13 292.41 281.481 294.172 281.481 296.346 cv
cp
.819608 .831373 .815686 rgb
f
265.078 197.668 mo
265.95 270.595 li
265.988 273.806 268.622 276.377 271.832 276.339 cv
274.994 276.301 277.536 273.739 277.576 270.595 cv
278.448 197.668 li
278.492 193.976 275.535 190.948 271.843 190.903 cv
268.151 190.859 265.122 193.817 265.078 197.509 cv
265.078 197.668 li
cp
.878431 .894118 .898039 rgb
f
267.887 262.342 mo
268.393 292.41 li
268.424 294.271 269.958 295.755 271.82 295.724 cv
273.641 295.693 275.101 294.217 275.133 292.41 cv
275.638 262.342 li
275.674 260.202 273.969 258.437 271.828 258.401 cv
269.688 258.365 267.923 260.071 267.887 262.212 cv
267.887 262.342 li
cp
f
395.77 312.419 mo
395.695 314.752 391.285 316.503 385.921 316.331 cv
380.557 316.159 376.269 314.128 376.344 311.796 cv
376.418 309.464 380.828 307.713 386.192 307.885 cv
391.556 308.057 395.844 310.087 395.77 312.419 cv
cp
.819608 .831373 .815686 rgb
f
362.918 199.925 mo
377.217 292.781 li
377.723 296.069 380.799 298.323 384.087 297.817 cv
387.334 297.317 389.573 294.304 389.139 291.062 cv
376.628 197.949 li
376.118 194.157 372.632 191.497 368.841 192.006 cv
365.049 192.516 362.389 196.002 362.898 199.793 cv
362.918 199.925 li
.878431 .894118 .898039 rgb
f
378.205 285.835 mo
382.609 310.046 li
382.954 311.943 384.772 313.202 386.67 312.857 cv
388.516 312.521 389.756 310.783 389.504 308.943 cv
386.134 284.566 li
385.831 282.369 383.803 280.834 381.606 281.138 cv
379.409 281.442 377.874 283.469 378.178 285.666 cv
378.205 285.835 li
cp
f
36.5502 206.815 mo
36.5502 206.815 70.6069 201.068 91.6324 200.953 cv
119.244 201.58 144.151 204.299 157.146 204.299 cv
167.721 204.299 235.528 194.373 260.393 190.68 cv
266.533 189.768 273.083 189.419 279.636 189.649 cv
303.182 190.477 361.386 192.857 384.575 196.815 cv
394.341 196.214 li
394.341 196.214 395.27 199.167 394.28 200.54 cv
391.031 208.058 266.856 229.03 227.875 232.789 cv
193.391 236.114 73.1598 225.175 44.6461 216.165 cv
34.3451 212.91 36.5502 206.815 36.5502 206.815 cv
.819608 .831373 .815686 rgb
f
260.393 186.813 mo
266.533 185.9 273.083 185.552 279.636 185.782 cv
309.819 186.844 396.967 190.454 394.28 196.673 cv
391.031 204.191 270.84 224.865 231.859 228.623 cv
197.374 231.949 76.8797 223.157 40.3522 211.644 cv
34.094 209.671 35.5261 203.506 43.5942 201.57 cv
61.8278 197.194 70.6069 197.201 91.6322 197.086 cv
119.244 197.713 144.152 200.432 157.146 200.432 cv
167.721 200.432 235.528 190.506 260.393 186.813 cv
.878431 .894118 .898039 rgb
f
398.98 195.983 mo
398.98 195.964 li
398.982 195.965 398.985 195.966 398.987 195.967 cv
398.98 195.983 li
398.98 191.853 mo
398.98 191.834 li
398.982 191.853 li
398.981 191.853 398.981 191.853 398.98 191.853 cv
.87128 .775779 .711419 rgb
f
398.98 173.345 mo
355.284 164.647 li
302.563 169.324 li
349.367 180.803 li
398.98 173.345 li
.756863 .576471 .454902 rgb
f
349.367 180.803 mo
302.563 169.324 li
355.284 164.647 li
398.98 173.345 li
360.078 179.193 li
360.073 179.19 360.068 179.186 360.064 179.182 cv
360.055 179.197 li
349.367 180.803 li
.572549 .333333 .207843 rgb
f
398.98 173.345 mo
398.98 197.532 li
349.367 207.454 li
349.367 180.803 li
398.98 173.345 li
.886275 .717647 .584314 rgb
f
349.367 207.454 mo
302.563 194.834 li
302.563 169.324 li
349.367 180.803 li
349.367 207.454 li
.756863 .576471 .454902 rgb
f
398.98 180.871 mo
398.98 180.803 li
398.991 180.869 li
398.98 180.871 li
.756863 .576471 .454902 rgb
f
349.378 189.281 mo
349.367 189.216 li
349.367 189.215 li
349.384 189.151 li
349.379 189.15 349.374 189.148 349.368 189.147 cv
353.435 188.073 357.549 187.277 361.659 186.458 cv
365.779 185.671 369.938 185.116 374.085 184.486 cv
398.969 180.738 li
398.98 180.803 li
398.98 180.871 li
374.262 185.533 li
370.14 186.305 366.031 187.152 361.881 187.767 cv
357.727 188.35 353.576 188.955 349.378 189.281 cv
.670588 .411765 .266667 rgb
f
349.367 189.216 mo
349.367 189.215 li
349.367 189.215 li
349.367 189.216 li
.572549 .333333 .207843 rgb
f
398.98 190.469 mo
398.98 190.398 li
398.992 190.465 li
398.988 190.466 398.984 190.467 398.98 190.469 cv
.756863 .576471 .454902 rgb
f
349.38 199.797 mo
349.367 199.732 li
349.367 199.731 li
349.371 199.715 li
349.37 199.715 349.369 199.715 349.367 199.714 cv
349.367 199.664 li
374.075 194.543 li
378.196 193.695 382.303 192.772 386.454 192.08 cv
390.611 191.421 394.763 190.739 398.968 190.335 cv
398.98 190.398 li
398.98 190.469 li
394.92 191.618 390.808 192.49 386.7 193.386 cv
382.581 194.249 378.42 194.881 374.272 195.588 cv
349.38 199.797 li
.670588 .411765 .266667 rgb
f
349.367 199.732 mo
349.367 199.731 li
349.367 199.731 li
349.367 199.732 li
349.367 199.714 mo
349.366 199.714 349.365 199.714 349.364 199.713 cv
349.355 199.666 li
349.367 199.664 li
349.367 199.714 li
.572549 .333333 .207843 rgb
f
302.563 176.714 mo
302.546 176.707 li
302.563 176.643 li
302.563 176.714 li
.756863 .576471 .454902 rgb
f
349.367 189.147 mo
349.367 189.147 li
349.368 189.147 li
349.368 189.147 349.367 189.147 349.367 189.147 cv
.670588 .411765 .266667 rgb
f
349.35 189.28 mo
343.357 188.238 li
337.425 186.972 li
333.476 186.104 329.58 185.04 325.655 184.083 cv
321.778 182.95 317.875 181.911 314.022 180.689 cv
308.253 178.813 li
302.563 176.714 li
302.563 176.643 li
302.58 176.579 li
318.195 180.697 333.791 184.887 349.367 189.147 cv
349.367 189.147 li
349.363 189.148 349.36 189.149 349.356 189.15 cv
349.367 189.215 li
349.35 189.28 li
.572549 .333333 .207843 rgb
f
349.367 189.215 mo
349.367 189.147 li
349.367 189.147 349.368 189.147 349.368 189.147 cv
349.374 189.148 349.379 189.15 349.384 189.151 cv
349.367 189.215 li
.505882 .239216 .121569 rgb
f
349.367 189.215 mo
349.356 189.15 li
349.36 189.149 349.363 189.148 349.367 189.147 cv
349.367 189.215 li
349.367 189.215 li
.435294 .192157 .0941176 rgb
f
302.563 187.176 mo
302.562 187.176 302.56 187.176 302.559 187.175 cv
302.563 187.159 li
302.563 187.176 li
.764706 .694118 .639216 rgb
f
349.363 199.748 mo
345.438 198.791 341.524 197.794 337.633 196.71 cv
333.745 195.62 329.859 194.516 325.941 193.533 cv
314.222 190.459 li
310.318 189.431 306.451 188.266 302.563 187.176 cv
302.563 187.159 li
302.568 187.143 li
306.479 188.148 310.411 189.078 314.306 190.146 cv
325.989 193.357 li
329.872 194.469 333.787 195.462 337.699 196.467 cv
341.606 197.477 345.491 198.575 349.364 199.713 cv
349.367 199.731 li
349.363 199.748 li
.658823 .447059 .32549 rgb
f
349.367 199.731 mo
349.367 199.714 li
349.369 199.715 349.37 199.715 349.371 199.715 cv
349.367 199.731 li
.584314 .321569 .188235 rgb
f
349.367 199.731 mo
349.364 199.713 li
349.365 199.714 349.366 199.714 349.367 199.714 cv
349.367 199.731 li
349.367 199.731 li
.498039 .258824 .14902 rgb
f
349.367 187.176 mo
349.367 187.166 li
349.368 187.142 li
350.19 187.123 351.062 187.06 351.783 186.657 cv
352.198 186.498 352.193 185.979 352.576 185.717 cv
352.915 185.451 353.309 185.289 353.697 185.129 cv
355.128 184.623 356.618 184.259 358.157 184.259 cv
358.32 184.259 358.485 184.263 358.649 184.272 cv
359.365 184.36 360.087 184.391 360.812 184.391 cv
361.751 184.391 362.694 184.338 363.633 184.288 cv
363.637 184.288 363.64 184.288 363.643 184.288 cv
365.323 184.288 366.886 183.812 368.475 183.273 cv
370.06 182.747 371.65 182.22 373.256 181.748 cv
374.558 181.416 375.875 180.906 377.264 180.906 cv
377.587 180.906 377.913 180.933 378.243 180.997 cv
379.215 181.568 380.25 181.812 381.288 181.812 cv
383.492 181.812 385.707 180.71 387.348 179.307 cv
387.631 179.001 387.203 178.704 386.844 178.56 cv
386.471 178.398 386.068 178.288 385.665 178.194 cv
384.855 178.013 384.027 177.891 383.199 177.826 cv
383.016 177.819 382.832 177.815 382.649 177.815 cv
381.171 177.815 379.688 178.027 378.226 178.264 cv
374.933 178.822 371.69 179.647 368.496 180.615 cv
366.896 181.09 365.308 181.638 363.655 181.962 cv
363.1 182.059 362.533 182.181 361.955 182.181 cv
361.675 182.181 361.393 182.153 361.109 182.079 cv
360.666 181.963 360.333 181.641 360.006 181.427 cv
359.674 181.198 359.282 181.08 358.885 180.992 cv
358.496 180.916 358.103 180.882 357.709 180.882 cv
356.464 180.882 355.208 181.214 354.008 181.572 cv
352.423 182.081 350.869 182.706 349.375 183.453 cv
349.367 183.438 li
349.367 183.419 li
350.841 182.635 352.367 181.94 353.957 181.412 cv
355.187 181.031 356.476 180.669 357.786 180.669 cv
358.166 180.669 358.548 180.699 358.93 180.769 cv
359.346 180.855 359.772 180.979 360.137 181.223 cv
360.504 181.461 360.799 181.74 361.181 181.832 cv
361.412 181.891 361.651 181.915 361.895 181.914 cv
362.455 181.914 363.038 181.789 363.597 181.681 cv
365.222 181.335 366.817 180.841 368.424 180.374 cv
371.637 179.439 374.899 178.655 378.207 178.14 cv
379.751 177.927 381.297 177.685 382.867 177.685 cv
382.98 177.685 383.094 177.686 383.208 177.689 cv
384.046 177.745 384.878 177.857 385.702 178.03 cv
386.112 178.121 386.522 178.226 386.918 178.391 cv
387.114 178.476 387.313 178.572 387.478 178.741 cv
387.676 178.897 387.671 179.251 387.508 179.425 cv
386.285 180.661 384.702 181.339 383.095 181.842 cv
382.506 182.003 381.892 182.125 381.269 182.125 cv
381.033 182.125 380.795 182.107 380.556 182.067 cv
379.707 181.937 378.928 181.515 378.167 181.29 cv
377.879 181.233 377.589 181.208 377.296 181.208 cv
375.986 181.208 374.639 181.707 373.346 182.049 cv
371.745 182.522 370.163 183.05 368.576 183.581 cv
367.072 184.091 365.464 184.604 363.842 184.604 cv
363.777 184.604 363.713 184.603 363.649 184.602 cv
362.879 184.628 362.106 184.657 361.333 184.657 cv
360.428 184.657 359.522 184.617 358.618 184.49 cv
358.407 184.475 358.195 184.468 357.982 184.468 cv
356.557 184.468 355.1 184.791 353.742 185.247 cv
353.358 185.397 352.966 185.551 352.64 185.798 cv
352.296 186.004 352.269 186.551 351.824 186.725 cv
351.065 187.13 350.197 187.17 349.367 187.176 cv
.772549 .556863 .415686 rgb
f
349.367 187.176 mo
349.367 187.166 li
349.367 187.176 li
349.367 187.176 349.367 187.176 349.367 187.176 cv
349.367 183.438 mo
349.359 183.423 li
349.362 183.422 349.365 183.421 349.367 183.419 cv
349.367 183.438 li
.658823 .447059 .32549 rgb
f
360.055 179.197 mo
360.064 179.182 li
360.068 179.186 360.073 179.19 360.078 179.193 cv
360.055 179.197 li
.498039 .258824 .14902 rgb
f
363.094 180.243 mo
362.843 180.243 362.591 180.233 362.339 180.209 cv
361.458 180.187 360.738 179.646 360.047 179.211 cv
360.055 179.197 li
360.078 179.193 li
360.927 179.849 361.918 180.062 362.931 180.062 cv
363.563 180.062 364.203 179.979 364.823 179.87 cv
366.473 179.617 368.031 179.062 369.692 178.727 cv
372.993 178.097 376.333 177.879 379.664 177.648 cv
382.5 177.603 385.282 176.784 388.131 176.784 cv
388.632 176.784 389.136 176.809 389.642 176.869 cv
390.47 176.91 391.328 177.002 392.121 177.018 cv
392.902 176.931 393.692 176.582 394.425 176.225 cv
394.792 176.038 395.154 175.832 395.477 175.586 cv
395.782 175.374 396.019 174.919 396.479 174.823 cv
397.298 174.556 398.146 174.551 398.98 174.55 cv
398.98 174.583 li
398.152 174.626 397.305 174.712 396.538 174.981 cv
396.119 175.071 395.964 175.462 395.6 175.741 cv
395.265 176.009 394.902 176.226 394.531 176.427 cv
393.779 176.81 393.022 177.182 392.14 177.305 cv
392.109 177.305 392.078 177.305 392.046 177.305 cv
391.207 177.305 390.433 177.167 389.624 177.12 cv
388.988 177.027 388.354 176.989 387.721 176.989 cv
385.04 176.989 382.383 177.677 379.679 177.83 cv
376.362 178.191 373.02 178.413 369.757 179.044 cv
368.152 179.397 366.526 179.908 364.859 180.108 cv
364.275 180.186 363.686 180.243 363.094 180.243 cv
.772549 .556863 .415686 rgb
f
398.98 177.76 mo
398.98 177.727 li
398.98 177.727 li
398.98 177.76 li
398.98 177.76 398.98 177.76 398.98 177.76 cv
.87128 .775779 .711419 rgb
f
350.779 188.404 mo
350.764 188.374 li
352.605 187.421 354.534 186.621 356.551 186.095 cv
358.59 185.539 360.687 185.653 362.71 185.249 cv
366.793 184.583 370.859 183.728 374.982 183.242 cv
377.036 182.942 379.119 182.896 381.159 182.552 cv
383.198 182.208 385.208 181.682 387.111 180.886 cv
389.043 180.157 390.73 178.894 392.789 178.347 cv
394.725 177.866 396.712 177.726 398.688 177.726 cv
398.785 177.726 398.883 177.727 398.98 177.727 cv
398.98 177.76 li
396.917 177.871 394.836 178.039 392.848 178.567 cv
391.848 178.813 390.959 179.326 390.039 179.813 cv
389.124 180.303 388.173 180.736 387.206 181.119 cv
383.322 182.746 379.085 182.847 375.006 183.422 cv
370.91 184.037 366.858 184.893 362.761 185.569 cv
360.715 186.011 358.598 185.828 356.603 186.309 cv
354.593 186.769 352.644 187.508 350.779 188.404 cv
.772549 .556863 .415686 rgb
f
398.98 183.083 mo
398.98 183.065 li
398.981 183.083 li
398.981 183.083 398.98 183.083 398.98 183.083 cv
.87128 .775779 .711419 rgb
f
349.368 191.853 mo
349.367 191.839 li
349.367 191.82 li
351.456 191.595 353.565 191.192 355.403 190.145 cv
357.389 189.328 359.491 188.986 361.576 188.651 cv
365.365 188.056 369.21 187.746 373.042 187.746 cv
373.432 187.746 373.822 187.749 374.211 187.756 cv
378.421 187.707 382.664 187.179 386.632 185.759 cv
390.562 184.195 394.777 183.377 398.979 183.05 cv
398.98 183.065 li
398.98 183.083 li
394.791 183.601 390.662 184.509 386.713 185.997 cv
382.681 187.345 378.428 187.755 374.217 187.937 cv
369.991 187.999 365.792 188.31 361.626 188.971 cv
359.561 189.336 357.442 189.615 355.494 190.346 cv
353.611 191.345 351.46 191.692 349.368 191.853 cv
.772549 .556863 .415686 rgb
f
349.367 191.839 mo
349.366 191.82 li
349.366 191.82 349.367 191.82 349.367 191.82 cv
349.367 191.839 li
.658823 .447059 .32549 rgb
f
398.98 187.176 mo
398.98 187.159 li
398.99 187.172 li
398.986 187.174 398.983 187.175 398.98 187.176 cv
.87128 .775779 .711419 rgb
f
349.374 194.099 mo
349.367 194.084 li
349.367 194.066 li
353.112 192.433 357.236 191.71 361.321 191.71 cv
361.481 191.71 361.641 191.711 361.8 191.713 cv
363.93 191.738 366.041 192.039 368.132 192.369 cv
369.172 192.522 370.258 192.689 371.323 192.689 cv
372.366 192.689 373.388 192.529 374.324 192.041 cv
377.837 189.656 382.094 188.359 386.353 188.24 cv
390.563 188.021 394.868 188.104 398.97 187.145 cv
398.98 187.159 li
398.98 187.176 li
396.958 187.853 394.812 187.925 392.715 188.177 cv
390.605 188.379 388.483 188.526 386.364 188.564 cv
382.144 188.681 377.997 189.93 374.406 192.203 cv
373.484 192.671 372.506 192.818 371.517 192.818 cv
370.376 192.818 369.219 192.622 368.115 192.494 cv
366.068 192.214 364.015 191.964 361.955 191.964 cv
361.902 191.964 361.85 191.965 361.798 191.965 cv
357.583 191.985 353.333 192.58 349.374 194.099 cv
.772549 .556863 .415686 rgb
f
349.367 194.084 mo
349.36 194.069 li
349.362 194.068 349.365 194.067 349.367 194.066 cv
349.367 194.084 li
.658823 .447059 .32549 rgb
f
349.369 198.24 mo
349.367 198.225 li
349.367 198.207 li
350.645 197.96 351.905 197.587 353.064 197.02 cv
353.66 196.746 354.133 196.346 354.74 196.007 cv
355.342 195.693 356.003 195.54 356.655 195.431 cv
357.516 195.297 358.381 195.262 359.242 195.262 cv
359.694 195.262 360.145 195.271 360.595 195.282 cv
361.103 195.289 361.609 195.314 362.112 195.314 cv
362.256 195.314 362.399 195.312 362.543 195.307 cv
362.863 195.29 363.184 195.261 363.486 195.18 cv
363.776 195.107 364.107 194.934 363.983 194.674 cv
363.555 193.975 362.782 193.798 361.968 193.798 cv
361.458 193.798 360.932 193.867 360.464 193.921 cv
359.176 194.104 357.841 194.139 356.569 194.286 cv
354.021 194.729 351.636 195.886 349.376 197.173 cv
349.367 197.16 li
349.367 197.139 li
351.524 195.695 353.903 194.417 356.534 194.036 cv
357.861 193.923 359.145 193.936 360.452 193.796 cv
361.026 193.759 361.597 193.682 362.179 193.682 cv
362.258 193.682 362.338 193.684 362.417 193.687 cv
363.079 193.708 363.774 193.982 364.152 194.605 cv
364.346 195.056 363.823 195.325 363.548 195.389 cv
363.221 195.49 362.889 195.531 362.559 195.562 cv
362.2 195.589 361.844 195.598 361.489 195.598 cv
361.188 195.598 360.888 195.591 360.588 195.585 cv
360.201 195.578 359.813 195.571 359.426 195.571 cv
358.511 195.571 357.601 195.606 356.707 195.75 cv
356.072 195.853 355.453 196.027 354.881 196.291 cv
354.336 196.564 353.775 196.988 353.167 197.237 cv
351.959 197.776 350.672 198.103 349.369 198.24 cv
.772549 .556863 .415686 rgb
f
349.367 198.225 mo
349.365 198.208 li
349.366 198.207 349.367 198.207 349.367 198.207 cv
349.367 198.225 li
349.367 197.16 mo
349.358 197.146 li
349.361 197.144 349.364 197.141 349.367 197.139 cv
349.367 197.16 li
.658823 .447059 .32549 rgb
f
349.369 201.434 mo
349.367 201.418 li
349.367 201.401 li
352.727 200.795 356.086 200.231 359.462 199.757 cv
364.53 199.051 li
366.217 198.791 367.867 198.358 369.53 197.978 cv
372.865 197.136 376.32 197.138 379.706 196.88 cv
381.391 196.723 383.11 196.613 384.687 196.016 cv
389.418 194.068 li
389.429 194.099 li
384.771 196.22 li
383.167 196.899 381.428 197.079 379.73 197.203 cv
376.325 197.454 372.901 197.449 369.569 198.156 cv
366.241 198.919 362.874 199.469 359.505 200.005 cv
356.137 200.555 352.753 201.016 349.369 201.434 cv
.772549 .556863 .415686 rgb
f
349.367 201.418 mo
349.365 201.401 li
349.366 201.401 349.366 201.401 349.367 201.401 cv
349.367 201.418 li
.658823 .447059 .32549 rgb
f
398.992 197.543 mo
398.98 197.532 li
398.98 197.506 li
399.134 197.32 399.284 197.019 399.089 196.837 cv
399.055 196.806 399.019 196.781 398.98 196.76 cv
398.98 196.691 li
399.033 196.719 399.083 196.754 399.13 196.798 cv
399.354 197.036 399.155 197.36 398.992 197.543 cv
.87128 .775779 .711419 rgb
f
349.372 204.154 mo
349.367 204.138 li
349.367 204.121 li
353.446 202.814 357.66 201.861 361.938 201.467 cv
364.082 201.277 366.229 201.297 368.37 201.247 cv
369.439 201.226 370.517 201.201 371.553 200.957 cv
372.588 200.709 373.579 200.29 374.583 199.918 cv
378.561 198.261 382.845 197.444 387.163 197.436 cv
389.303 197.361 391.442 197.317 393.571 197.117 cv
394.639 197.027 395.685 196.845 396.748 196.664 cv
397.197 196.607 397.647 196.544 398.102 196.544 cv
398.188 196.544 398.273 196.546 398.359 196.551 cv
398.565 196.577 398.79 196.59 398.98 196.691 cv
398.98 196.76 li
398.799 196.661 398.566 196.65 398.355 196.631 cv
398.317 196.63 398.278 196.629 398.24 196.629 cv
397.747 196.629 397.255 196.712 396.768 196.789 cv
395.724 196.998 394.662 197.215 393.596 197.336 cv
391.463 197.603 389.315 197.72 387.172 197.76 cv
387.163 197.76 387.154 197.76 387.145 197.76 cv
382.898 197.76 378.624 198.567 374.646 200.088 cv
373.636 200.444 372.638 200.849 371.582 201.085 cv
370.523 201.313 369.442 201.314 368.373 201.372 cv
366.232 201.466 364.087 201.491 361.962 201.717 cv
357.713 202.185 353.506 203.028 349.372 204.154 cv
398.98 197.532 mo
398.968 197.52 li
398.972 197.516 398.976 197.511 398.98 197.506 cv
398.98 197.532 li
.772549 .556863 .415686 rgb
f
349.367 204.138 mo
349.362 204.123 li
349.364 204.122 349.365 204.122 349.367 204.121 cv
349.367 204.138 li
.658823 .447059 .32549 rgb
f
390.407 199.246 mo
390.522 199.223 li
390.526 199.239 li
390.486 199.242 390.447 199.244 390.407 199.246 cv
.713725 .643137 .580392 rgb
f
349.37 205.929 mo
349.367 205.913 li
349.367 205.896 li
351.071 205.518 352.77 205.114 354.423 204.576 cv
356.079 204.09 357.566 203.021 359.385 202.865 cv
359.783 202.835 360.18 202.825 360.574 202.825 cv
360.95 202.825 361.325 202.834 361.698 202.843 cv
362.072 202.852 362.445 202.861 362.817 202.861 cv
363.42 202.861 364.021 202.837 364.624 202.753 cv
366.363 202.601 368.083 202.284 369.8 201.977 cv
373.253 201.377 376.581 200.423 380.048 199.765 cv
383.523 199.238 387.038 199.321 390.519 199.207 cv
390.522 199.223 li
390.407 199.246 li
386.955 199.446 383.503 199.61 380.095 200.085 cv
378.375 200.304 376.71 200.858 374.989 201.2 cv
373.281 201.577 371.556 201.873 369.832 202.156 cv
366.516 202.726 363.105 203.116 359.759 203.116 cv
359.643 203.116 359.528 203.116 359.412 203.115 cv
357.706 203.321 356.197 204.334 354.493 204.793 cv
352.814 205.304 351.1 205.674 349.37 205.929 cv
.772549 .556863 .415686 rgb
f
349.367 205.913 mo
349.364 205.896 li
349.365 205.896 349.366 205.896 349.367 205.896 cv
349.367 205.913 li
.658823 .447059 .32549 rgb
f
389.424 174.567 mo
389.424 174.567 388.486 171.318 384.695 171.616 cv
380.905 171.914 378.059 175.319 374.876 171.616 cv
371.693 167.913 368.883 169.324 366.494 169.324 cv
364.106 169.324 363.424 169.388 360.055 168.124 cv
356.686 166.86 356.554 165.051 355.462 166.482 cv
354.37 167.913 355.176 169.825 350.772 169.08 cv
346.367 168.334 345.394 166.631 342.932 168.431 cv
340.47 170.23 337.388 171.005 334.153 170.261 cv
330.918 169.518 335.193 167.719 329.198 169.08 cv
323.202 170.44 318.594 170.61 317.552 170.261 cv
316.511 169.912 313.938 172.114 316.431 172.725 cv
318.924 173.336 318.924 173.336 322.663 174.254 cv
326.313 175.149 349.367 180.803 349.367 180.803 cv
389.424 174.567 li
cp
.227451 .301961 .223529 rgb
f
330.471 176.28 mo
330.471 176.28 327.772 164.18 325.87 166.873 cv
323.968 169.565 323.333 174.018 323.207 176.28 cv
323.08 178.541 325.516 171.951 325.997 171.381 cv
327.347 169.781 330.471 176.28 330.471 176.28 cv
cp
.352941 .647059 .419608 rgb
f
323.202 173.156 mo
323.202 173.156 320.109 166.736 318.172 168.025 cv
316.234 169.314 316.046 182.155 317.228 186.339 cv
318.254 189.968 320.406 192.82 321.524 185.263 cv
321.829 183.203 321.706 181.084 321.374 179.032 cv
320.767 175.281 323.202 173.156 323.202 173.156 cv
cp
f
366.193 169.296 mo
368.299 166.876 366.971 161.611 378.059 162.033 cv
389.147 162.454 390.164 164.428 388.182 165.652 cv
374.174 163.831 372.263 165.956 372.425 172.044 cv
370.951 173.097 366.193 169.296 366.193 169.296 cv
cp
f
303.753 169.331 mo
303.753 169.331 310.61 174.747 316.271 167.821 cv
321.932 160.896 323.665 171.661 323.665 171.661 cv
323.665 171.661 325.588 167.781 323.386 164.327 cv
321.185 160.873 315.984 158.463 314.003 161.964 cv
312.021 165.465 303.753 169.331 303.753 169.331 cv
cp
.227451 .301961 .223529 rgb
f
340.276 178.573 mo
339.231 176.154 339.205 171.253 333.705 171.674 cv
328.204 172.096 327.295 176.937 328.279 178.161 cv
329.263 179.385 335.056 174.165 336.653 177.685 cv
338.264 178.113 340.276 178.573 340.276 178.573 cv
cp
.352941 .647059 .419608 rgb
f
323.202 173.345 mo
323.202 173.345 313.852 166.375 310.419 171.251 cv
306.986 176.127 304.459 177.478 305.091 180.803 cv
305.723 184.129 308.671 189.681 309.724 185.01 cv
310.645 180.922 308.342 180.147 310.573 178.51 cv
311.405 177.9 312.207 177.248 312.948 176.53 cv
317.768 171.858 323.202 173.345 323.202 173.345 cv
cp
f
377.948 174.931 mo
377.948 174.931 386.183 172.01 383.335 163.531 cv
380.487 155.051 390.522 159.316 390.522 159.316 cv
390.522 159.316 388.262 155.623 384.166 155.647 cv
380.07 155.672 375.261 158.79 377.169 162.332 cv
379.078 165.874 377.948 174.931 377.948 174.931 cv
cp
.227451 .301961 .223529 rgb
f
344.257 177.039 mo
344.257 177.039 338.773 180.517 335.793 175.225 cv
332.813 169.933 330.152 177.542 330.152 177.542 cv
330.152 177.542 329.347 174.65 331.34 172.305 cv
333.334 169.96 337.262 168.538 338.159 171.163 cv
339.056 173.787 344.257 177.039 344.257 177.039 cv
cp
f
384.124 174.927 mo
384.124 174.927 382.694 167.973 386.91 160.674 cv
387.805 159.124 389.021 158.059 390.335 158.038 cv
392.933 157.996 394.448 161.404 394.034 164.239 cv
393.953 164.792 393.558 164.828 392.965 164.677 cv
389.538 163.805 389.963 168.005 388.637 173.165 cv
388.14 175.098 384.124 174.927 384.124 174.927 cv
cp
.352941 .647059 .419608 rgb
f
323.976 168.178 mo
323.976 168.178 333.523 155.255 340.255 157.947 cv
346.986 160.64 349.23 165.093 349.679 167.354 cv
350.127 169.616 341.087 165.256 339.761 164.046 cv
336.364 160.944 333.616 165.956 330.485 167.2 cv
326.064 167.864 323.976 168.178 323.976 168.178 cv
cp
f
340.59 169.925 mo
342.696 167.506 341.369 162.241 352.457 162.662 cv
363.545 163.083 364.562 165.058 362.579 166.282 cv
348.571 164.461 346.66 166.586 346.823 172.673 cv
345.348 173.726 340.59 169.925 340.59 169.925 cv
cp
f
361.455 175.554 mo
361.455 175.554 360.446 164.272 363.422 152.432 cv
364.054 149.918 364.912 148.189 365.841 148.155 cv
367.674 148.088 368.744 153.617 368.451 158.215 cv
368.394 159.113 368.115 159.171 367.697 158.926 cv
365.277 157.511 365.578 164.325 364.641 172.695 cv
364.291 175.832 361.455 175.554 361.455 175.554 cv
cp
f
359.555 174.091 mo
357.84 171.998 358.921 167.444 349.895 167.808 cv
340.868 168.173 340.041 169.881 341.655 170.939 cv
353.058 169.364 354.614 171.202 354.481 176.469 cv
355.681 177.379 359.555 174.091 359.555 174.091 cv
cp
f
349.986 178.966 mo
349.986 178.966 343.281 176.44 345.6 169.104 cv
347.918 161.769 339.749 165.459 339.749 165.459 cv
339.749 165.459 341.589 162.263 344.923 162.285 cv
348.258 162.306 352.173 165.004 350.619 168.067 cv
349.065 171.131 349.986 178.966 349.986 178.966 cv
cp
.227451 .301961 .223529 rgb
f
344.958 178.962 mo
344.958 178.962 346.122 172.947 342.69 166.633 cv
341.961 165.292 340.972 164.371 339.901 164.353 cv
337.787 164.317 336.553 167.265 336.891 169.717 cv
336.957 170.196 337.278 170.227 337.761 170.096 cv
340.551 169.341 340.204 172.975 341.284 177.438 cv
341.689 179.11 344.958 178.962 344.958 178.962 cv
cp
.352941 .647059 .419608 rgb
f
355.284 164.647 mo
355.284 164.647 351.632 156.541 344.261 154.225 cv
336.891 151.908 338.365 159.803 342.155 159.436 cv
345.946 159.068 354.37 172.725 354.37 172.725 cv
354.37 172.725 355.988 169.804 355.284 164.647 cv
cp
.227451 .301961 .223529 rgb
f
367.563 169.02 mo
367.563 169.02 369.088 156.921 370.163 159.613 cv
371.238 162.306 371.597 166.759 371.668 169.02 cv
371.74 171.281 370.363 164.691 370.092 164.121 cv
369.328 162.521 367.563 169.02 367.563 169.02 cv
cp
.352941 .647059 .419608 rgb
f
371.671 165.896 mo
371.671 165.896 373.419 159.476 374.514 160.765 cv
375.609 162.054 375.715 174.896 375.047 179.079 cv
374.467 182.708 373.251 185.561 372.619 178.003 cv
372.447 175.943 372.516 173.824 372.704 171.772 cv
373.047 168.021 371.671 165.896 371.671 165.896 cv
cp
f
347.375 162.036 mo
346.185 159.617 346.935 154.352 340.669 154.773 cv
334.403 155.194 333.828 157.169 334.948 158.393 cv
342.865 156.572 343.945 158.697 343.853 164.785 cv
344.686 165.837 347.375 162.036 347.375 162.036 cv
cp
f
382.663 162.071 mo
382.663 162.071 378.787 167.487 375.588 160.562 cv
372.389 153.636 371.409 164.402 371.409 164.402 cv
371.409 164.402 370.323 160.522 371.567 157.068 cv
372.811 153.613 375.75 151.203 376.87 154.705 cv
377.99 158.206 382.663 162.071 382.663 162.071 cv
cp
.227451 .301961 .223529 rgb
f
362.022 171.314 mo
362.612 168.895 362.627 163.994 365.736 164.415 cv
368.844 164.836 369.357 169.677 368.802 170.901 cv
368.246 172.125 364.972 166.906 364.069 170.426 cv
363.159 170.854 362.022 171.314 362.022 171.314 cv
cp
.352941 .647059 .419608 rgb
f
371.671 166.086 mo
371.671 166.086 376.955 159.115 378.895 163.991 cv
380.835 168.867 382.263 170.218 381.906 173.544 cv
381.549 176.87 379.883 182.421 379.288 177.75 cv
378.767 173.663 380.069 172.887 378.808 171.251 cv
378.338 170.641 377.885 169.988 377.466 169.271 cv
374.742 164.599 371.671 166.086 371.671 166.086 cv
cp
f
340.732 167.671 mo
340.732 167.671 336.078 164.751 337.688 156.271 cv
339.297 147.792 333.626 152.057 333.626 152.057 cv
333.626 152.057 334.903 148.363 337.218 148.388 cv
339.533 148.412 342.251 151.531 341.172 155.072 cv
340.093 158.614 340.732 167.671 340.732 167.671 cv
cp
.227451 .301961 .223529 rgb
f
359.772 169.78 mo
359.772 169.78 362.871 173.258 364.555 167.965 cv
366.239 162.673 367.743 170.282 367.743 170.282 cv
367.743 170.282 368.198 167.391 367.072 165.046 cv
365.945 162.701 363.725 161.279 363.218 163.903 cv
362.711 166.527 359.772 169.78 359.772 169.78 cv
cp
f
337.242 167.667 mo
337.242 167.667 338.05 160.713 335.667 153.415 cv
335.161 151.865 334.474 150.799 333.731 150.778 cv
332.263 150.736 331.407 154.145 331.641 156.979 cv
331.687 157.533 331.91 157.569 332.245 157.417 cv
334.182 156.545 333.942 160.746 334.691 165.905 cv
334.972 167.838 337.242 167.667 337.242 167.667 cv
cp
.352941 .647059 .419608 rgb
f
318.288 168.665 mo
318.288 168.665 312.892 155.742 309.088 158.435 cv
305.284 161.127 304.015 165.58 303.762 167.841 cv
303.508 170.103 308.617 165.743 309.367 164.533 cv
311.287 161.431 312.839 166.443 314.609 167.687 cv
317.108 168.351 318.288 168.665 318.288 168.665 cv
cp
f
361.844 162.666 mo
360.654 160.246 361.404 154.981 355.138 155.402 cv
348.872 155.824 348.297 157.798 349.417 159.022 cv
357.334 157.201 358.414 159.326 358.322 165.414 cv
359.155 166.467 361.844 162.666 361.844 162.666 cv
cp
f
360.96 170.102 mo
360.96 170.102 358.196 159.15 353.114 148.324 cv
352.035 146.025 351.064 144.515 350.553 144.636 cv
349.543 144.875 350.587 150.339 352.094 154.686 cv
352.388 155.535 352.556 155.544 352.71 155.241 cv
353.602 153.486 355.439 160.051 358.4 167.897 cv
359.51 170.838 360.96 170.102 360.96 170.102 cv
cp
f
351.127 166.832 mo
352.096 164.739 351.485 160.184 356.586 160.549 cv
361.687 160.913 362.155 162.621 361.243 163.68 cv
354.798 162.104 353.919 163.943 353.994 169.209 cv
353.316 170.12 351.127 166.832 351.127 166.832 cv
cp
f
356.534 171.706 mo
356.534 171.706 360.323 169.18 359.013 161.845 cv
357.703 154.51 362.32 158.199 362.32 158.199 cv
362.32 158.199 361.28 155.004 359.396 155.025 cv
357.511 155.046 355.299 157.744 356.177 160.808 cv
357.055 163.871 356.534 171.706 356.534 171.706 cv
cp
.227451 .301961 .223529 rgb
f
363.951 177.928 mo
363.951 177.928 363.293 171.913 365.233 165.599 cv
365.645 164.259 366.204 163.337 366.809 163.319 cv
368.004 163.283 368.701 166.231 368.51 168.683 cv
368.473 169.161 368.291 169.193 368.019 169.062 cv
366.442 168.307 366.638 171.941 366.028 176.404 cv
365.799 178.077 363.951 177.928 363.951 177.928 cv
cp
.352941 .647059 .419608 rgb
f
359.298 161.636 mo
359.298 161.636 361.362 153.531 365.527 151.214 cv
369.693 148.898 368.86 156.793 366.718 156.425 cv
364.575 156.058 359.815 169.715 359.815 169.715 cv
359.815 169.715 358.9 166.794 359.298 161.636 cv
cp
.227451 .301961 .223529 rgb
f
326.603 172.287 mo
326.603 172.287 328.667 164.181 332.832 161.864 cv
336.998 159.548 336.165 167.443 334.022 167.075 cv
331.88 166.708 327.119 180.365 327.119 180.365 cv
327.119 180.365 326.205 177.444 326.603 172.287 cv
cp
f
379.459 175.563 mo
379.459 175.563 378.159 168.609 381.993 161.311 cv
382.807 159.761 383.912 158.695 385.108 158.674 cv
387.47 158.633 388.848 162.041 388.472 164.875 cv
388.398 165.429 388.038 165.465 387.499 165.314 cv
384.383 164.441 381.271 167.216 380.065 172.375 cv
379.613 174.308 379.459 175.563 379.459 175.563 cv
cp
.352941 .647059 .419608 rgb
f
345.985 170.412 mo
345.985 170.412 344.064 164.201 339.733 161.061 cv
338.813 160.394 338.996 161.304 338.456 162.064 cv
337.389 163.567 335.659 174.746 336.846 176.688 cv
337.078 177.067 338.533 168.194 338.719 167.727 cv
339.794 165.029 340.943 166.171 343.335 169.368 cv
344.231 170.567 345.985 170.412 345.985 170.412 cv
cp
f
348.435 171.216 mo
348.435 171.216 352.053 161.594 354.245 163.433 cv
356.436 165.272 356.649 183.591 355.312 189.559 cv
354.152 194.737 351.717 198.806 350.453 188.024 cv
350.107 185.085 350.459 182.123 350.622 179.135 cv
351.059 171.133 348.435 171.216 348.435 171.216 cv
cp
f
335.091 167.747 mo
335.091 167.747 329.696 154.824 325.891 157.516 cv
322.087 160.209 320.819 164.662 320.565 166.923 cv
320.312 169.184 325.421 164.825 326.17 163.615 cv
328.09 160.513 329.643 165.525 331.413 166.768 cv
333.911 167.433 335.091 167.747 335.091 167.747 cv
cp
f
402.949 179.546 mo
402.949 179.546 399.297 171.441 391.927 169.124 cv
384.556 166.807 386.03 174.703 389.821 174.335 cv
393.611 173.968 402.035 187.624 402.035 187.624 cv
402.035 187.624 403.653 184.704 402.949 179.546 cv
cp
.227451 .301961 .223529 rgb
f
346.047 179.768 mo
346.047 179.768 348.348 172.814 341.564 165.515 cv
340.123 163.965 338.168 162.9 336.052 162.879 cv
331.872 162.837 329.433 166.245 330.1 169.08 cv
330.23 169.633 330.866 169.669 331.821 169.518 cv
337.335 168.646 342.841 171.42 344.975 176.579 cv
345.774 178.513 346.047 179.768 346.047 179.768 cv
cp
.352941 .647059 .419608 rgb
f
368.654 177.672 mo
368.654 177.672 372.052 171.461 379.716 168.32 cv
381.344 167.653 381.02 168.563 381.976 169.324 cv
383.863 170.826 386.924 182.006 384.823 183.948 cv
384.414 184.327 381.838 175.453 381.509 174.986 cv
379.608 172.288 377.574 173.431 373.342 176.628 cv
371.756 177.826 368.654 177.672 368.654 177.672 cv
cp
f
364.318 178.476 mo
364.318 178.476 357.915 168.853 354.038 170.692 cv
350.161 172.531 349.784 190.851 352.149 196.819 cv
354.202 201.996 358.51 206.065 360.748 195.284 cv
361.358 192.345 360.736 189.383 360.447 186.395 cv
359.674 178.392 364.318 178.476 364.318 178.476 cv
cp
f
387.929 175.007 mo
387.929 175.007 397.476 162.083 404.208 164.776 cv
410.939 167.469 413.183 171.921 413.632 174.182 cv
414.081 176.444 405.04 172.085 403.714 170.874 cv
400.317 167.772 397.57 172.784 394.439 174.028 cv
390.017 174.693 387.929 175.007 387.929 175.007 cv
cp
f
161.866 191.277 mo
161.866 191.277 174.568 189.861 175.321 191.899 cv
176.074 193.936 179.445 198.979 179.445 198.979 cv
179.445 198.979 176.585 203.446 174.761 204.273 cv
172.937 205.099 172.226 204.964 171.321 205.436 cv
170.417 205.908 167.929 203.751 167.912 202.194 cv
167.895 200.636 160.427 200.655 158.803 200.153 cv
157.18 199.651 161.866 191.277 161.866 191.277 cv
cp
.956863 .666667 .509804 rgb
f
139.906 187.918 mo
145.032 188.707 159.055 189.492 163.264 190.868 cv
163.264 190.868 165.922 204.138 162.582 203.695 cv
157.162 202.976 134.834 200.818 132.066 200.153 cv
129.265 199.452 125.907 199.902 122.52 198.45 cv
120.403 197.537 120.321 196.775 120.276 194.934 cv
126.391 191.662 132.298 189.334 139.906 187.918 cv
.580392 .388235 .227451 rgb
f
136.285 188.69 mo
136.286 188.689 136.288 188.687 136.289 188.686 cv
136.526 188.625 li
136.524 188.628 136.522 188.631 136.521 188.633 cv
136.442 188.652 136.363 188.671 136.285 188.69 cv
.517647 .32549 .180392 rgb
f
133.158 198.806 mo
131.553 198.806 128.696 195.997 136.285 188.69 cv
136.363 188.671 136.442 188.652 136.521 188.633 cv
135.522 190.4 131.734 197.402 133.75 198.627 cv
133.605 198.744 133.395 198.806 133.158 198.806 cv
f
198.797 204.612 mo
222.118 187.913 li
266.928 180.05 li
245.874 193.816 li
198.797 204.612 li
.819608 .831373 .815686 rgb
f
235.294 214.51 mo
235.767 214.51 236.193 214.182 236.298 213.7 cv
236.416 213.146 236.064 212.601 235.51 212.482 cv
202.241 205.311 li
219.982 192.756 li
220.444 192.429 220.555 191.789 220.229 191.326 cv
219.903 190.861 219.259 190.752 218.799 191.082 cv
199.15 204.986 li
198.816 205.221 198.656 205.63 198.737 206.028 cv
198.819 206.427 199.126 206.74 199.526 206.825 cv
235.079 214.487 li
235.294 214.51 li
.215686 .247059 .282353 rgb
f
283.445 203.34 mo
283.931 203.34 284.359 202.996 284.454 202.503 cv
284.556 201.946 284.191 201.41 283.634 201.306 cv
248.483 194.698 li
263.638 184.244 li
264.103 183.922 264.221 183.284 263.898 182.817 cv
263.58 182.348 262.936 182.234 262.471 182.554 cv
245.29 194.407 li
244.95 194.642 244.782 195.06 244.869 195.464 cv
244.956 195.869 245.276 196.183 245.684 196.26 cv
283.255 203.322 li
283.445 203.34 li
cp
f
222.118 187.913 mo
221.149 186.456 li
197.749 203.257 li
198.797 204.612 li
222.118 187.913 li
.878431 .894118 .898039 rgb
f
221.149 186.456 mo
222.118 187.913 li
266.928 180.05 li
265.835 178.296 li
221.149 186.456 li
f
198.797 204.612 mo
197.749 203.257 li
221.149 186.456 li
222.118 187.913 li
198.797 204.612 li
.847059 .866667 .870588 rgb
f
266.913 176.308 mo
266.913 176.308 266.888 178.104 265.006 178.447 cv
263.125 178.791 223.721 185.952 223.099 186.066 cv
222.475 186.18 221.107 185.892 220.51 184.698 cv
266.913 176.308 li
cp
.129412 .14902 .172549 rgb
f
221.257 184.823 mo
220.801 184.593 220.072 184.697 219.728 184.955 cv
198.797 200.559 li
198.797 200.559 199.586 201.938 202.035 200.18 cv
204.483 198.422 221.149 186.456 221.149 186.456 cv
223.437 186.039 li
221.257 184.823 li
cp
f
267.607 174.375 mo
278.757 145.026 li
278.983 144.431 278.5 143.808 277.868 143.879 cv
234.058 148.746 li
232.442 148.925 231.079 150.034 230.576 151.581 cv
220.01 184.021 li
219.89 184.393 220.209 184.759 220.594 184.689 cv
264.845 176.671 li
266.104 176.442 267.153 175.571 267.607 174.375 cv
cp
f
268.217 174.375 mo
279.366 145.026 li
279.592 144.431 279.11 143.808 278.478 143.879 cv
234.668 148.746 li
233.051 148.925 231.689 150.034 231.185 151.581 cv
220.62 184.021 li
220.499 184.393 220.819 184.759 221.203 184.689 cv
265.455 176.671 li
266.714 176.442 267.762 175.571 268.217 174.375 cv
cp
.215686 .247059 .282353 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2002.i515.009.P.m004.c25.Contemporary workspace flat icons-07.eps)
%%CreationDate: 3/24/2021 11:35 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Blfb6Q7b.h/#*"F+soG2ROQXp0D6br?<XgL>M!o+WhQ7U!KiIs('sD]TPW/^TC\Ronc_:1j=?]V!#F:*QZS<[jDsrG5PaB`
%fu<So4FQh_m+9Pg2B+GsA3KnCfgpTDdJWf9T7$2Oiu^eS]gdH.42*Zp9c).=ZfBI/q30KB2F%4hnDqK+3r!UfL-?Ibr]-E@B"nbg
%S.(J9d<?WrNA&$a:Ia6ck,6,9+<;=(qNq-A^R`i_BEJ+"iVDTa;ZaWL/Jb]1R[\g$a)A^trCMV35G.r,O/"Yoo>Q*e(sf)Zr>,lj
%r%uOF01KSAq1'fe/^ZeTdYEIY7^%R`PD/qs?oa,D\G45I;uD,t+3jjHkAM[C+j9m&rC?j!9*]/14L4b^jfke8_OoZ"%ta`)oB0K>
%2k1:IAe6/7m.:\Zaq"LC.5-i[E'??F*R<Q5?[H2up!`-sCbf7SjC50J8!-90N;m2`C\n1hQ4/f!@F?!+N:Vc.k.2PA7#'+dn`Z=c
%#QHLsSrDfXkE"ea(ZU"mh1g`&)$U%b0cA792B=Gad>;:3Y3W^Qa_4#U\bu:_P9D0db$"4`Fi7(nq4#c`0R#Fc^hnK`.&MFdrPe$-
%iJ/"ae*<"lE&O0a2#E[WC1Es,.No5UOfS7-*JFg6h'r<I\s9=6dp`g2d,rW``TMoW5Kq/d`m`8u*9l[^/gJ./G!8)m@WHXE,6-V=
%*0le=C\q1797("s7anenlWudNDM9F]d<@85gL!`PT$0rL$0V*LQUD9],*^49NIJJ:$\(WE>b(%j)"@+n)1>pU`Pd9*e+`E9H22i.
%5p(P;T3[sMS\C]oq+mVH5+0)&%;8o9d6KnobMZ=uC]!"aiV;am[sXf]O4_6g!eGe`I6X1Ec;l9XEIDGH4rI+No)X?f:&&Q&Sj"%?
%[['j$i+VYA??=QVSrJaH4:@4\2#e!e<^,g?;pWJ4.oS-<3+)S=S%k`55+PA"R)R>48#'E]\'=^-h.Ug+p@=^\rQV\J9O!t1M4RKI
%5J6h7q?s/#UE9=i+!)*dI/K5TLPrVe,t?@IoBp#JYKKSV71--B@6PQ(-K@&ViRuuUn_hUd`VJ9):UA`MRsi3;h(PmZ`ZO0/]oWDN
%3hQC*Q2Otd<?6&S#Dp:=GBWc5\o2H^-2MSQI\e(/f-b&pcthkA`\B,q)%mBA)o(ZlN%[Ab^7%d9kGR/&X,uL4M<!X<kf&>K`MaTJ
%HZ@8fgN5pN+*HbBi/]pqqu.=8g["Boe:bYrMt(8`Us7TW))T^VMmpU1&YDl=q-l?qHq?)1<G"C?FK77)7Qu4io=(NN/tekbf)9m`
%3W8=eh`^k.Zk*0-=6!d='>sX$><_mmnEI-SP::qTL^mfVIW_n4&L70'%=C:1%kiu(IQO-kbXYSQi<Go;-/$drM#T"i@,(>4Vkc_.
%ns@1*05/euS+T)9LQ`)doum,@nb/D[e)@9bU'9bj^[C`+hN#TohCa-@V@D>3G5?%;f,jhaFgnjLTuRp4Ci9]BT>#\83I<i8BlDnO
%pnYr:0PF[[RB\r`@Xd4KVq9/)fS\t!\[Bh7mC/?dj,&\Pq(&`jVoPRe:Ii-Al`kPqDe2<(p3fUf:4G60%,[-B>k71<X`9XO'5udZ
%X5Wm<S,):J>gR?]iA6h?DejFCfo*h:oY9->Gg>@-7Hnl5CSSAH3KVk[)k2o60.)+CF;rkrfj)!uHdeF%B9K$^DIXS8CVKW*[rNoo
%YA`1VltjTEGE5C"%c(tQ)c*ZtNGB.GUUIRm(UK%qn`X3I(A-9WY75?>?J#HDB</*=\_PX`=BW1_!M=ctH9M&_@*7llAe(]nDJ`fh
%9Y#*rjo.D:\_$Er)(Lj=BB/T=@a+M\h*!UWH8nt9[bS]b44nQY>OGnB*Gi7kDp*iiABXZ"bhgumO5'iAk5&q(p[,LE8+/s3(N5'V
%ZX<,]5dugJ:(QCCHu\`-kl$mt:j]10X2DCs38&Pk>Ht`(h7T1]>UQNE=DRnZG]A0r*_sJ_IWrE+2tnGdP<Ng]A;biKcQ;q%oogu5
%omYu,o2Io#rVCoK\:GRlR+?cF^$R,2:S9ipS*u`F4+;I%^"ot@2*Xe2p]blr[W&B>9#UPEr:TQ(o\t,JDaS<X%kQ[`D$/Jf5?qG`
%2ntOuCra!MJT/!\Mofr;A2ZSX%&\MsFnI7hgRm`F_68>ORnZBp[DCs+p=/"c!E+t'g3%2`RU4b$EI4(3qHhqO=-%4rC[4%$o@\B"
%Gh11io[itE`X=*CB<!oWV:+tn6387n&D6g"5]=p*hcn.ST.%a_EI]*fg:KOJnns@RdR1CT]5F6VHa#T60Yd4-p>C/l*j0QPXmI9J
%D\'b]Gk(KL[-/0Yh(-VB&X$\fV;aYXbI?PZ>&^BiK5g`oLVIW1oj^+tqi]Fuh.Ze"KTk1aD5TUl4j<f5f2WfrI-sTC["g3)lZTW-
%/>(R)2nSM/luaU9maQX^o];:iD"?\82#::75i&,OiuuohfV9KFlgs)WpnH)k["6uCnrkeSi]StWo3nJ+p"71=`+8c#`uX>/hOD5>
%S"IA_=2>qEC'W"F!up!?2YI]Lf0,C,mHS!fbj,eF*ZdX#ksHT^*\jGgU$jR4C"sMUmr9-0""]E"Kiu#_lTGl*pTV6DLDG99mbb_C
%r`=NLQb<tn4Z9W"JnNCK'O7!^Z:Z]sb7h<hQd>u:G!F=46&<ff4j[qn\5eU7m!Pbl`uYi"-Z=dhl"KWs1uVLXq?5<NHt?OZHe]jU
%p@8$lqNWX*S$0ipB9V<E#Z&3_2a#hfO`NRZl$A$:p;56\^<ndInjg=ca4iPsJ*`qm[XgNb&U.PNp$esJO,U[12N$8MEUk[59h]$*
%q-0IPb^F=*d0n!<T'CZIFnUUUHYhi<\(Q&_1E#HMGV\NMYqt(iL%`%&`N5+q1u$k.HEb09o@[iM]AR,Pg;e1'bOEDlg=SHq=:F@U
%fnGC?)LD)/c:OXg5r*1ZgR*qtULB5]ro;tu(se-6f["U%[Pg"69m^iaiUQHWl,=+B+01l7*P=9,W!CJY)SPC32s@bgD5E$9[X(m>
%a1pdXgjWDlj0uG<q2"tW4na)?1<++-IC@]9h5Y$@S;pBl&^FbPCBY6A1#&IDa@+\f6g".eAYShMbeCS?%[e`WjIbgn=h@GpI6(a&
%@4KFYe\M.-76,ff\L;kaZS/%ccZ;s0W0VdnMp`!4G!?f)5mYfsLQm_FB/><JPX@(G+!GJ2\L9OOleIYRnh>,^H?$loQVe8B(T#Gi
%p-k`?jJ#o,XEPj)V&,0Z4OlZl>a.FAfb^['b:(V!k1'%7bE&=!D;OB'2p^fTiH;YerG,0558S=CX4ZPA*`W0Va%p&k`B@X9hQ_iL
%+6?QGO5HY[cdj&$4h/P!5I/JVJZjJ1?V:X<f&I#GI-n`$%X`+HptF>@JfN:JLS_/5E2a)FG2R-8hH]H@X?@tCmD.6^>j^F;X0"jE
%?>^q#]k^-dis:*P>^<LSJ-Rk+GV[DH1?ri^#;S?%d2L:u1Pe1,pghi<p<)>u)7qJ;N0qNSnZS_0o?$L>b<)j2grb?]D[Z4tV"s4r
%G&7Q]^,9hSJ.4k^TCr_@cnT&n4W1pS:To6]FmXM#7`32H]f*8RG$A045=7MsgUD<=L2ps^EgNW^\#:*u:+.'j[b;%!3uiZV^Mmdm
%,Q64&khe&Wch+tZcj,4#.1=h#"nFAg?Zo.$q?'F//\540b$0S'H9F+!2bErG[e&sT`kNh-p"qppZL]C54Xk!pq:P6(oPA\Gp<aBe
%fC>itaj7E;#bJEZm3NS4i=1.cLJH]CO\C'\/DjaBca>pg/ZR)Zp2F:ee(Pl@DVr?SZ+[P.K^J/83$0g1SrOS7,fh$!a53idcHF4g
%'.S>T,O_W-ie%f*q\Y.aaLg8tA=u;dh]`!2J+;DXDTR*Ys6_Ak4iDg\n_Z_3p[B$>+oZhEruU17J!fqc#d?*lo[G,s1#G@BpCQpZ
%`-`(Mh]7P/S;^gi^,R2tR8(dcR.eA$/)StpZ@*Qa-F7&shr82Ek3[a)4?>q6c5o'[r.V7U9RSq=Mk6L+f1'[QCZlq/0'9?/?0]&(
%p#/!XqfZ6h.="-#U""EZ&%t<ri$$ip&(q&1;t]&l4*\gV*jWCH],iHg_+h@XCKl"HM4O4VS,$_SrIVDpd20_Da)>Qs]H>HHUW"&@
%dE*32q/CXs>l3GDgIBAW*o>,gK`9QOHaY\QC\gKaZ)?Qq`hsW2lQ.!MUT?@obANcP`pAM+"s1>*gm#"\d!2G3H8![;R*e:pW#V<<
%47.DT58tW,ei:FRb(2-U54lWOh>'Q#@]t5lVo_P4qt7.*A8ZeE#+&[W3*m)TQ[?R+KB)(OGW@`i%ZZm.j5g;%?I[4DNYhB*YlEhC
%GhHL5o\aui(rshn\DkEJo@XuddL.pWp=b/k5T<E[S5S(%Ej?Zi7bcutqqZ(_:P41'D`6"@;8]OqS*4o(LLq3LJEQ9m2Oip&@CQ-^
%nK+=nfTNDOGWm*SlYeun`uPpH].P'6SX9o(nK8h?f%eu)!SLhQm#>gDFC9Ds*LK%M?4YkY%c*J[Kr0p'^3oHoGV]0Xn4:g=99Z(k
%h5Cf`q-2GYm]S*iRj)D3bLq5)'R=^>f3-;EqK7.`eRoCU?<cMW]1j>.:Z\q7YKo]H:r@[&dZ\h@)pSDuHi/)p!Ii5Z5"oHof5B`E
%5*gW$clS^2AqTp?Fq"=\I*sN`9?1mBhHA`K1N,e^d\+1&gY0pt)gcD!O$:'BFg0aMqC%#$e-D=hN'jr5IhP%93qtH'^qr,,0m6Fq
%/e>aYd:Wsp5K:uP])+tg#=$5EO0NIZF7<ZZr"se?a+/lP)"u+S3nS'U_*33/+!*(iPOE/E5&&^@]iu#ERslkl3kjWjSt0^%1VGdH
%JM-D>YB&[R_;!\.3U5#ljjijJoZ_dUIkF4>j$&46V=E<ogN<-u0jYi,kMBM9G@93%j%6G$>8t75P3V#0gRBfgI5Z01nD">gh/>,\
%NdA?HZC(:s>dGG`Nj%WPdm!NB_mZt:#MAh9d.cdjq`4:s\f[d.62#`lUZ*;?-#MGkC9OH#3Ia5iD:!\kIX\kq^UfdD#48<enBh-0
%Nrcu6o!Me9_Oe8P5H`)ni$c8Z403]u$"(A(ZSr1tI5\Fll!AeHYkuOK9+h-n]#se85iI7t'Ge0WAc!6<k`NZdLQ6V#nAOdl-Q_@A
%n?R3I[bS]bgHO.-XLWs@GHg3^n)e$&*NZfpem&aInR0U)"DdE+VMFhXXK[KR>`W/2bdi?dG;/1ik1meC4.(("gmj95adh\)RCt?<
%*n^d+d.Q/3m[J<JT?U-fb_LTLhSGe1#khL61LZ@!0g(uH)"+RN_[^Tt?_2i'qn<\urg8JT&pr84@Z-_&36^]+)J![))*K-c<?>9A
%r7,>&r9fJoJ7`H3j72-HkIoZDkDKk75$htE[k58Yq2Y+(cr&-fljF\Z"2rqe.XH'jc/7+IB'5_TI0o&/*Ggk=ST?m9-P)-E4o"dB
%oGPe!ZRNZPh8`-tr/GP:gb3Sm(%4oi@IQcGEKSc\?N.gMp=K1qXV]$q?>A9Lk\]^e8&!4C`VfDuGgpqAlba5;m-iXtmq6A/7P=@`
%B_R':3_;L2.#fSG\"<$UQ*FP'OhM&^)?+E!HI47Ufo=e<ITZ5YTdS07WD?l\=\!_f0-L/DqcjC_JS-IdpJRK-kk`Rj1Y?Edi1o/i
%h&GaSLQ^IOrXh':eZWe+Im&I6>OC%WT$=.-O4rO_.gMp7TG64W;KU9BmX-02P_Sp9.=,qcr.gT2r)%4H5m]S3]79.soFU*PqG>AI
%/J:\eD=lY,A(L?]\$q,VpMaCGS@(NTh;6%lq%[[l#i"+OE'@U@4WX3A^gO>kA:KC&mRtTUQE3.c0:i]pf:%d+iOHdWA_2WG+/Z^:
%_QhEM*/*?<3;ue;f$4ZErW;1()u!\tm\:$_nCZ[%.R!OD48.i$mWB7kM%L9&LX3kaIJZ=EolfOQbF7\p[3W>kH-[PtCjY$+k]BAE
%p#p1q(HgI_N;g0J:EANih=;ZbOB3C2&!XKn6L.kPpA#.HBm\&M\=D`oRqQZJfu1dGo'oP`^AG*igEmBsI?0=W&"uS7UE2Jkc?IC?
%5;1Jd[e%BY<"HT8lJLVK'+Z_)m^M-/*lLT56N>hdQ@Md50'K2<faW2PP6h"IbIs8-oZ(Cr?4g%qC;PCoU:jX,*u`&ra6V.NS+1la
%rf:?siPk:dTA/00n"^op#g2XkJ*uWO>T:@fDXu&ko_?J?A0VTkac>r-$m%HuI="5cD53MIprr*JXX8h-M1^uLTB=&Uq<L3t.I82&
%5<.987i**1][u3('[OJ>UZIZIX%=C<+.I/';r/Qk-3jqA\)Q]s`U\IU/FR9V+8H2j-]am'oCD538bX&7_]h?!^Rn5mdk'9ak`N`s
%*5*4c=$QNPT>!PMc\d,DHu_OQrIJ<2T`mSCRCsLJ^78Q#^E%\\S.=G8k(=c<-a^nJ4rhYA:PP(Tpl3?Z*W"6$2Yi=2HZAt,_oJDJ
%AT4FQU.q^Bk8q'Tc2+YslW3cs:*$X#s5+[mGNGI/?[n?e*mYWUck62Gkj^m8ZX9U-2\>)Ks$c]:,e!F(KKA!(RP<"#(n[Bo7bo1C
%p]:D/BhnHd+%&;BV#MFrBH/Jc7k*%h4TE5WkNEH,fG*sns*0JUZlH&pI)+Y=(]ETJ#keWH`8J8DJ,QhoSG\d=r"6k4^MuS5iI#Se
%lmh-u*6$'tDEj]T_oZSs(s+\-^ZrT%:]K`NqYp;"c44bR-#DQ_s2)m[J+2Vc4[5fn^Kdq=qot26Uh;OKg;R=QZ4-Pg3'h*$+27Mh
%qJ%q)<<(Q"41GF,mMBum?d4Ta:<@\SC:GCFpuLOL%04&W?e9rM!ELK'L6&O),;coo,_+<#GP!E;1&OgRhC,TmH26_)1Hg6`IQ0Rl
%i`9bfKCQd[eo/$doC]ldrD?;2K^EhQPM,K<dB/C`GU74j?[#t3YJsMR%<d(n.?,XDGqiKMcb&GHdFI3"M%m`):i=d>5'biM.)p6#
%oV.:.2na?%pir\*q>:/-!Fp<UiN^_hMt=pSF9gIU]qX`Rk<nH;OJ,'trA!u+TUQb,VaC@0lZlU.I/`u/*Ph,,i8j'bnaXM*j5,H.
%A;g&3c[HiC-TCD(f2KGsP3$2ggY\VZW?0#dDr"a7a+&@\/'n65ItNeS3O1BpIXeih=j&"4AR!G`ZAiot[r1Q`ghU69LE5%b@H*W[
%fhM?h2-Z0JnSIiDn\]bPk'$JH0BVPdG"/ZCL++0NIT^nS'FU(J40agpd:.>e)V5u\VZ-#&r8/me2X,p:/#*tm)QA0G)3%CAMa+C=
%DNc_[=8;Q)o?TN::>ZT.?]>#-Kg$PB[<D%e4use1hi@t+NIG.A^-3DfL9JU\nY/me%Gct"\o[_0G'7j`GW))+\JW$u%A(nk0$^Vi
%_PXMa1EeLk9h0:#ji(WH)XY!-ph:cHE3VC7=:BWuShES)n\<`P2Y_965+>f!)6&t:o%iO-m;64?_N/_I-RWQe,9>;-Hp!nBRi(VH
%jOs%`AGPP3Pc)FjGF)aUanYchm/1\.=C1IVVh<#+McmOMdH0>7J.2_fn#!GOG;D:D2tL0rg=M9(e$b$id=;pFp*O#b>mG#[1V/>4
%n`e#'\8jp`"]r9.YCke]nS0tPT+(K,Jq9[W4-Xe:itf]c3#g.?ohJ."T?u)g89`=33ZuE*j7U0%Bu\Q!pC^O4h`CAOIVt^$hYE"G
%ST[#8SSWeESZPfWqM.:%nQGfM[ZA1ob[(`+5E=#A-Kd=\o+f'=k/c]CD$hW#\=-m5>Tf"4`YIs$\*IO)&!BEX'O8icK2tLES04N5
%s8Moa+6W\&O2';]J"Q&aJ,DM1(nX$!62Tng[U>%Us7qB'/1Vgg(PBL$mHI])ru?I>4Q>,kn74(tAMQ;QN(sR1(:1?`e*5!<f9L9V
%E]Z(%h/T'n`qO*68+SOH]N9os0tc$ibaD!D]r0b^l_UX!Ef'GN>G1Y3%WhL11Gn-aF#MJ,F(0IYbOq9=eos4oT+NQh?19A<dMn]W
%]*DQ$gsN-OnD3-&hcri%m3dB)c%.)2l*XX!I[5)/s"Rd*f4j9?q9uOmq;]`_hMlqA4!%/4^"5`WNq`o"`_YKt=5mqXnT6TI?d*0O
%3peAt&=5uuD"`?c$mD2HcUR@nP=?goUS?qYpG9CUnb^_C`.MAO6%/^ti]87Z-*)0('R0LdOLUY?C:N80^*)Pj<S=^B9rr`kQ5:fh
%2[iD26\j.0GX-Ts/kpathXPE269'JfH3^'j5?k4=m[@2GN,\Qsnu8NoD4m!#'\C[O^Q'X_!3\oKrI)=2@,m,pVXJp2r5G<Rgu7ln
%7J::9mEOqJgjfOh1Ro5j!kuXbb*?nIrtp7OUOPq&f]U:U-0]N[A0Z`sPj)4)C4p'rlatQdpu6C,RfEB1R\%Hu]gXk`_%(,g5`<ZJ
%MktZ*]h4md$+S%ijWZplEKMb]Io)AWYssH0\m[fT0fR,f1;F`(BKl;rGib9-][C+)qnm"EHi%6n-1sJSN5"\hABpe0-%g,#Yk<"f
%S<s`MH"8trjYON."1/q0>M?$JrQji\&Pk0P9UbP#k$&o$j_qMgV!Pc4?/gI&a-%bP-1mL#F(45%o?iN'6>dijrbd,WMGE<i?i"X*
%f%li>+_>44?Z]<\./AA;?9OjnSde^gfPLlLnWMF03dYrEmcYC]c0Y,h,B4tc/b7WcVo/>Bo./k)4.011`T[ppbnVjRAbc+:0$Zu*
%aB930#uEDj#(I`.qX!D8a_:D$G;HN38#paA3[HD)`94EmK:@>eHndWBOidEZ\f9Nh08Af&'uTg$Z"GG^,^Uofri8"?\TLr09eAkQ
%\q@>q\W4;djCs_TDUUIXgkYqeE7N!5K"GpQR]Fr(l\:Bp$.Fq^UqcOA9"K+KA'R"DSZf,f(jkl42/N8V&</[0al(^)_,k^+ZKBa]
%(qr5ji$_\p_TSj#rM[+k]4&"5FpPTp]$'-:gcQ*W"8N]n4rKoPhb7+rEH`(WH_p/E)s?:EZe+6ZD4F_\k.0uE>C#E.I9bV!A:AX3
%V?h)[E]fi>[4gGT\S3-&g8S1"!fi`UE-^L5q8q$#%aAq%mO['Onhj#;\$PnFQ6u@G@B@moE'7M*iAX7cj.Hls&U8)o*QGLch/'P1
%I"0=7c]?C!`uf2,;)7?[H@@(se"F[)ZK>3!As[UNPMoZ*j3W?9D1DfABF:O*7TPIVkK'7,&VYLtYj<+Q\7$rIr*m<@'%)irbe#Tq
%\3*a)9AJ_8;1.,kj8&'.[P:Tj`h]fn2K$6lc?S[D_Oc05S=e\\Ja45nMNI'WHEk&bgBOiRRN@pHb"?u=?EU*Ei74*/U8->h`R2fg
%(B,\6cK;<C=1qCra.6SMl=eUa\ug&-ma<>c;>iI%2%c;C9p^<X1`a7I_W,Y-.%%N?DP#a;6PrA2B6qa;'8u[@h$,h03?!/AG"?5^
%kbchGW6k\GP:<VPGodpf]/2'Wir-W`*NcsNG^5d5c*&VTnX?.iXpi!UTF/aT8("3G>n.Prg+>Z`i8+=3E&nH[XlX=fcH_Ggi]''[
%r2/fC&LSARW&liqr8N[_NF,lW#k\s7_50/0;-:o:4msP#GhD>?l1%K8-%j]5EIP5oc!uOuM;LM`<YONgFB.T%o_caJ^DoB7qFRtM
%V+9iHj%E`@S$/iJS$%;H_%[haDaHj`8R1T%V]XdOE0)RpB8a6i-+IiE5AoL_NUY4.o5=3ZKnQX!n:*Yd3u\Xll])VrpgQ9HqtjUO
%hH0=-0,klrh<3\?hUBLucUVp3g:ZGB\NGmSf%UXoT,5E>U[Q:H)kThoO"\%EH?^"(*7]<1DK<H6$GVr\/fiEil+6tZpb/16k;g<<
%V*,bm=(R%9pp-A.]Bm)^:]KbFA9,N?`,%V>.5C)S-J6O9Z+&n'IIm$AflVE8G!7u.I5Un5.d<-uI'FX$p.'dS2W8X[5`:],C_K*T
%g=qhMR=r`'U[ss&EgTDWfa+fU(XIfdE!jp(POXVNH2G=)kNVW+(.*B:o>TI:/D$Ej/YNLfdg\ge0bEs^?V*<2W)C#V8Fs</ka%'-
%I[SI<IC\Vg\ES1`Y33o)'@GIZc!!O8jFWkMGnXZdkBP]+a(DlsG!\,1oM'T"@POCE&3m]sCMpo9V2<tiDnt#f"hY^-GR6UZLW!nF
%)7ePdQV6r/VA&?eg-*Hu`l?Jsj@^Hh%:/P^8$@@_O+(ePnY`iae:Z_MOS\?XTJ!bUi?7@\I.5>6d<'=k"G\'-VZW%[?UUD6T*$5H
%L?J>.8d+C&]%i4=_;EO`@f#Q(HuEl]&$q21)6oe7U"i1@#qnXmI5;j=#NMe2Dm7*$r]6\omO"=LrWe?!-9<1W`Z0+>%OOR=h?RSJ
%clE^R&C`m6R3F6Xl1?KL0J+Z9?e4*Z4M%1ccX&7@1d3!d9])P.nE:dnhQVTD5+[h]DY&sk?/^jRQr-L=&fN.sd,W,q*52.XL0F%W
%I!NiQI`q5QDR@AEa[,(ae!nVP2Y<pCpiLYtRgcs[US(7c:XZh.7;c^72[\CXA8`)V-KFJ`TMR;]O.X#%pMXLc6mf"rrH-/HF?Lq.
%9_rHLdAY@l5`1\Yps[uUdoY#WG]LN_8UUccb->6Y^`+Nl2kl/I2fS^[XX15YHZ%&,T<P_I71o;S3P-IRDPh9QJGo!9D,HZ8AjD;l
%fHVZKi>ZPo](pP<OOIX.XLVrHn]b@:\%f,d!Q'g?)tJGL7SaW>Gl2=M^5iVH8_RP&&iOMRI<$2i_Yh)86M.ekbuZO\<g@PY4l!.'
%XE1#JMGDJcW/j9)V^EaZa03OSU%r](dU,nST@CGElJ+7ob(dgFJn(L@3dT%&oe:A,+4"T'L5T]^&#8srD`X\j@(^c[QRLk9:A\;_
%'h`:U(t0VDmO+RAH.>B.k2opH.jk:Sj5Hehl[\?E\$Po%fm$FbiP5Z>0gQQ[WGaAXiprns\.B]W-8!uWg[/"1I&1u&V5jJi;"kJb
%^n4\S#Om.7,6k2s)t;`i#M,/kMimuO!Ia\,c[YeU8)qFTB2eL7d+UBX>Tn7]o7;jL8Ya71@:%CO^NGrW=QiD"C>bBis7k^%J%FS<
%[tD_6XVo)TLt,[ND6V,.O$4&VU_"L]H5*-T!O-BT0nK@4CMI]:qKJV]-6B!Sdm(.hKd0ql*1U>e7se3EU15Y/*Ed#*J>j[)Q4Aoj
%Fd+\QfF%*b1XpddSG-fOX7JiX](Kc=JSbj`@0LO`3i_%^)JmW[Nss5)-mNSsQB5h\`iT;f#sKDu;#U7Kjj'0uDE7ujiUq=prM`#e
%_8bbA`6O]V5!C<pqf0%[HX5M$)>E4]c3E'=,l(k(RW:Al,-KAWi[[35Si3,>Ys&gc+\9T>o&\;3dufVB@&_]t<FfV2NE(ao++=r"
%7qdsH0*sn-O,?Z"J@<n0QH2<]/"t3O_0H^LA=hH+,OZ!mbiY["jBr61JVaf2:YWrqP*67u\BR#a]R%:t!limkRL;u*TO$0X"@kHL
%6tb`A&SFJs/[`sWA-P[7U[>.TK#$He_i]etXUVZ@bKfFD-BrHU84sEFncF^AoU":i#1u[93a*24#8C"Y.:59V20^8g`bt$Ikm2lH
%]:)IgpuF&)N[^/'JG0]:;(Xd7VA)@D>J_k;%4S$HZ_?\j",9A->]YZL*?6HPpKV[G8R^J@T]d%V\iKk#:m.Z/9IC`DKZ#U.WPTXl
%OnI,(Z^1l\Rq;eEl[s2=5nGi&-cf:$f.+@`'!p2J,0FkFdBq\4$\'6d=+^Qk$;l=AU>bYa<oMkkPs?j=lUSSO*q'$)gED+LkVVCq
%l"I1l.q%?BF9l4HmE/:$-!gY)a6P;h38;ArmgPbL$,WfCZ@)Db>mr]WYj1<'"IVI$)$jR04G^2,biAo8lZBOp(ekG)pPc/t<@QW&
%X\r%V?(VdRSQukO9dH8P[+Bgb6Y[mWb1haT(T(P,k>C>9#Y5XO'PRE!)-5[LE&9Scl!/"04kpM@E2ONNHaEhi0e7PNSLiT'aFse+
%3-%#-HQ_=nM2B"Z792I]!<Z%k*PZ,NZ3DRl7].JT[K?1EGK,jZO(&A]Lm8+T!GQ)m$u/t"M=*WN<obaBZ*\LSY6[+Vb?J%:^m/T#
%hg1qqD6aR`;2&j4')fHL&s9&[NVZ;\U;(MDFuH?hS!Aad\-7NC_%oSs6j^scSAL#M\5U%[N$iD-*sjs/c2<cY9r:n#HkKFCVQpQ,
%X"1PhHV':07d8X&TO$+/CbN3BK#XI'Pi>8@0Rm5.eqQ?CWRCLL5Q@\m55i[_++Iqrr!p*CFk,8Jib70Tma2o9HK+]8<oK1*T*.;h
%'po8L*)YJf97nC%kj1!jZn<k<00s7d."8lA`X)e\0]DBn_ulQ:-uC[&5S+WOp4T!mi"A:m+[IhnI\,g:)+d9<NJJ___e[>8bV;C]
%i+p%6ck9M$0>NH4`!jR?P#,AZ5EcjjFV@TO0K,#k&IO2]n5o_i.CWk+Tm`LT!nk5X=>U=^M578/\/$DV>Qp<\:J;n.-B4LfWJ!t\
%D=IaH%J(RN'k^LhYW,K5LHntA8k-`:a=3:&1T"k#-1Q#.-QJBt"QGoI'ENNR&PMb^M(.Ws[*.GiO]%AbCrDHchPp2K'MSh>]Q:H-
%U(]LDWk^;3I;$05l(jX1NtoS!OCVOp3U+OSTiJ`60]>F-8tNt1eg$):7pSKaN$o:LQ;nbBKN_q4K$!:uH9kjG0UTkb=N,Fs@U>ZM
%!eX'aP8QoC)VJB6hC[&MTu%0XH0AXpfe=D"2Mdr6NU83^(_;RGCn-*;ZHoS)oM6NUKta/G0n#24(/47ieM0tG6nca'6%4J$.^V-t
%*sjhRj9Nd9f'mE0FJ^"q7]@GN7YF&h+JZ]/#69pr66+FQ'?YtZ-<2J@G_l)+"!mMbYPJtOn.oD!W\%3F;?H3(HlY,(GH@C`q%rNg
%*.BGFDR3jdI$&oNY0)$O@)5GtE!4g!=ZHT.HB94)=1T1C3Y;WHlM*E6Smr*S]8UWlf3U_5=?HJ<A3R_%BH'LFb.#4N;o)9SFcUfM
%LC4D)?AZnJm'H9COmEIkBT^]O+"%/]c'M&6B<K%:%HmQGAdiXuq,7*"^`Bq58=<(Agh@L`(us,c,8S;+6CT)j$JU,[msP:-k'Egj
%_hZ']6FZE8dGlL+1Ls?Rfe-c(5h`kP;lUUrOZ;Dop21Tm#[s"i=c(;,qkWEYKH!%>Yg%uVJ:K6u<oAg_H#%O/d5R[.JV+d?$@\ij
%]SGL]\hsHonbC-3TiidD$j5Lq4E#ecTdH=T\ZuDUTG-`(@%\bE\IH!aP8g$C,e%Lj3gN$s'n>+kVHFm(ER?:EG=PcC`9op6$qntE
%fn0TJ>0a!qdfniq#"FZX_a6:]1J\!$;ZnH3^go='%l?cGZP=Ta<k>*=U>tE"&9:,A!X#ZA#8%huPH5VZ7Q>T%d$msh$7UeCJ-9A(
%1',dWSiG+:fd]RDa_%GKXgkGJ&&H@_DR-9/QI'i4c&j@!dh5guqW32^k+Y4q/?OFW6ap5fF#jGCHJqs/GGVb60pT9gJ5PcoF9n*$
%?mDB#XgdDL^@[M$F(KqoQkkl02=Wo%^lT]I+Q7k`(D6a#a]ZSt12*FB6j`9s'2'e<H9Ica=fh4nnt#dDN)bm4pJ$F`.MNn&aL/%T
%.^]k^:`FqDMZ?(HBG8/t+HF#7ma&lt+Un<9;-GE*B;O?55o^"QqGOI*Y=UZ?%rJ!ai]:Km(&`28<7KQgZ@X$PLm5o&BGS0-4>9dE
%5o_amq"X9JL()RD`u5M;.ot"2Z+e<8aW3rDb9,+@<`Y5O/+kG*?&&3e8LG^Y+pP8T3\SqRM6AT>6?Rg"T"nkELo)ENYmr)Q?;DrR
%la@.fD%-ET`siZ?D?;HICOU)?QO8@VBAS9s*np'obI=*aG3lMn-%b@ui*?ZaK7u)p[r2@?62WBM7C<&RQVU:N]X\6H/[:dD"kO`q
%Jd&X"d^!`H9oF5uF2(\5=!1te_YjNE'_srj^7\YS*!m_+.ILl[bRtqJ3Pp'_`$OQoHs)<?-B&'#P%WOm+l]2X'&%<`TH!u"n=^^T
%_(#D;PJ/LdH7VSJ*-#B8gnPp,N;+e_Kqk)CVKCsmK4hV1Dr*4XL;@+]$^<Wg2D?[Ypl,;"EBqCOF)7d`8pa)KBn7FG$B$5ubh?^\
%cH&`hSt3.Yo?_VcB0TQEmQ[p]\nWrXZbd?V$n!`PCBI+$RfGK8TWp7**.dIF+dbp.!oQ7)enj[+k'JA;5tu"q%Oqhd"!o?g+G@7R
%n`&&oWN'0`NgL7P6)0%M=pn[SaV!OWlqA`Ym$O@Mk^gfPl&:Wt*2r?:\B*51m7RSm8S$?gBVHe>ng4)`3_^5@C>_'J?TSD%k9.bU
%d0G#&8\c1dEQ+tlIuF?uj66.8jd_"-j=Q2q'JN@B6O%g*1>E:_18t_%eJ!#4&KW+l6f;W,I*N47,mFd0TL*jEgn`A5["5BMmYB,H
%R17$07(,::&)%X<?k\T_0Z>FG7tS3,-TaY8M6R_5'%.\<UXP;Q/-`Gn:8C2odDnd\nZ]Wt.$l(;PRr&44,n&R'"r(b_;^O"/`H5u
%NUeS6O_,(>e`d@gP/J80Xp3e%2;*4(<hh=\X;k[EWSUqm7h\f+i],]Be-kdd6,.B533<1sn=*Fi!f$lZa:'&CAYm:qq1snq\F)at
%7PkMX`=l6UaSP)-=ahhGlX41*Ho*NK81_MoK7b3_*&'#/c`&ft<f7D,;'fU<bS<B^H$(R@QB\H.1GP/^F_t7q,/^::+/h5cWj:dB
%bUo6uFSOd)$(tF&PUk;B)c3gQ83`rqf/<a/@`doni0dL-:W965\47C&"R$N;,R56DBQXimbM:'/3%.mk%aftU1unb3GaK=]]EXH(
%::(_">pcepB+0PNhndF7nK$CB3,oO#kf%KZPVkR%O?X>?_P,R2e3F=No0]`cphS>%C&:=H[SR2p!Q>"c;5Qq=.qJ07<J_uUa'6ct
%Ai@5XkN`c[B&RQ7[@?elX'DttiX%D0^o[lt,k<RL^u1;b-1Dd@p:kn_VAJq7&3l;5+4#JAO:dq:4/Wi3X4FU#l7\DUNe$W-16Cjp
%U-;T2%'ioE!]p-,;(c_oXS_RV[H";]lV9IA!I#:$JSk+:K7_Bn[3%CGW2VS[@M5Vs#bX"/L(.?TAI6\GD./h/.TP'T`nHI"Jk\[b
%"q#T".Pb;@_4j^,=FF%Ebr(56K@h2$Z5?NP)(ojhfq$9]^KiqO,MG^5_4U]l.tgVaZI0RY8;/9-<s,EUG/]eC\fMDdmG8\6'+d[B
%?q'Fi.7"X[c\e4W!Hcu6M)OJcUE"e2TTs1JJAdqP!1!-W(m"miUkN8N&NF&cjAZT"Q;E8gOD7<n8E+52P0jFUknIuhc6l%a&,e7F
%&4iVJjIH?Nig>IOKFt6Xm-7IX(m/`nTG[l^,iW;GcI"M2FEOYrP+;3FHP+qnr(t.q_l\Tjn.[/#JNFOM5]g3QC.8$#[K112e441U
%X=kNeHilE=r@nMr<"+f6>9tgE'B#cZElg&_Nf&WoCl[RR'Q(</K;?]OZnb=DMF]FQRG_kImmR#,?ipuu7k#utL`V-mSIl8-=fi1F
%@2V]B7USG'P*dM'arof^3q_QqVHsrRSI-.H9eR=e=^KbG5]e+T04YS=WAu0GU&VG$^_e8%.oM]j>,8>aWk_A5ZhcR&^=\/CrC9VD
%Jm1"j(i"WGG$m@-aB<1d*#k!6-pdYFiG,%U(3TKg$*b)STqgR7Xpn?Q[u?[&"j-fr_m6V>"9EmKaJ5GO#0s=oDMDOFrW":l'\S.9
%`U\+d>,G%cR[<!o1mXj=X?^]t'iLd.S9f]:O%q.>Ai@[3r.XJBUpJ*i7[7C/#Z,T9N`?@J5p1.EEm_]XLm^Lt@'W7CdSb647cEHH
%=Z-;CE%`t*,#)^c0Im0-Lg69NVGi;qUo@Z@f"?UY1'#`[=3e5ViH\L)[$'[V)e1l=3GMq/Q#;>HjR+0u"/j>)Po<(e-OrfUj#,_X
%eDdFB$pV0Kmf_6Y?GKiC9g>\<hgk`Crd`q=8_=ghGFXY!@>''1q`oH7]ot'6R^F%QE9Q!%i$9M@(kQ9>FUA`$-)!Jai_eE*e_Ftp
%.cOK)_JoJb_>oboBOHeOdaY0G(]s@:T"QL'G3;9FU<@T8>L-8RYl,k19#A7-8edL8g=G=F,.PRG0/6!qp,['?!FMpYl,Y\i.^6&\
%2LpmS^`5-N^c;;]=BS"r5kN3b"Ckq5&rS+S:$rmiiNj?P'!`$L3(']Bg]7lc4ppEf3m^k"JS(^B6gpuXa[b0hi#)6%&3%]n'P;OH
%aCTq=_l/EJ@,e\+JO`(GKSTlG==/0^jYZ$o(-VtUN_M0g.48%pgd!IfFcT3sVl(+/%N$D,8HPI!*^l4)au+@eV7IhU6"a!A;E-R:
%$aJbk[@O%224"ji==Tu<Q\'".b'oY/^@<07%?I$?XR#Oq]>9E%\^]9"bsf<J2$aFUQ3R7REXY@iZ#g4"ak0-+&Uqtr%meO(Qrd37
%M>,US)OZHg!rN8/3kh3<am,fZ:<3PWRiZ(/f8[16&R5fk2OkD1E0$ITp]]EH-6!N`:@3eJE+*$q3a_P-SLTQ$ie2gg"CJ46]c9Ek
%&u37g[YRUn*bHB^]Z*fkVtgUgG$lsn0T4R%QL6FN2CEj&JCZ"/$k&X#&fO3V,u#/Al86SgE4Mh+7hP\=B"m$E^jDb@Dt$lm*jTm@
%0f9%M*]V=UKLRXf,"mhOQM2kXX98f#DQjrk6'X>#b5sIV$KmS>[h80rSa7?\%D$[+Bu`9XeV2h%>064AUKkZL%YNitKgCNG94F$9
%;HUj^NC^M=oL??r`4n]V_'d&#KKLMB!k2*]O'q"dGC1+>?(KlGS":[CdtaZe2NK)V"+M>G[T3&MZIhR=K=U-52\coG3FA(K6#>=e
%302Q3)F+ZG^&cti:Qe+N(6:=>WCbm^AF%haf-`fe#qF8]gB8GG+[%4jG1dH]8gY-F.nD_U.M/a->Ik[jS9#k,MbT'arCM)?BM>D1
%D96#!dsQs#2S:41\gZ3'U]Mm<,[\Au"M4P1Bjqh$0saU:jj1PH?J_MrrOY'A]K3$Xk$!`M$9-gF9aaH=8OeG0/^srWcGWG2ZW832
%GjiIZ>MWW5U,c*e!qP8-rn*dQ:GrEi:OdT(>BF4kCeape8.jJ/Al>Tr%md9D>LCQ@OME[SG?N(jA;8aeMae@[JLC))1QW%:S&=s/
%(hFd>QgQ*E`B^81@lM2CGM7Tee?qhF!`g5k^r6150UkE0qoWopX7Q=<[jOJ)$7.ljUIq'8N7;JPd1t*G1GR;WnX2oSRtta2hc"*c
%J?/([)_ieJFl\.?gsVU\WrceY-Z4QQeWg\S]!\1pd48hR#d_"X.BG77aX+)1e067&2!^NY.\R-m9%#CpNc<e,0a+>f?DS0F03<9l
%k]DrFJ(<fA-/#lH-5/S!d]gZ8d9!f+a*uAs#_<-1C;`PC1^tGK^2a1gfoLY#;%CGAV6gg3?\9QHs5VNfk_gjV>U:Pp*q@jfjT"R5
%%W#`7p:oTk<"#)d2b>f\r`5B^>L?&Z@d6Z0,0%1ChhX-IoaA?cqN/Wj72EOE"A9#hAmLTpXb&7#?;nK^XPJ^;=c_)39h:%MJPY0a
%;(QCFb0[G9!mW=GK.3NYE^i57?p[=]&rk8<;B!&gdrpo1)*+%6oMNk:+fhH>Zo=L&OSSm5\gr//RjN2)]QlFkf=h5ePA!J&E4Z,$
%-V]i4)rgZABoqr0I+qf_c3c9mpr]Hrd;$%gO]kK/njO2dRqJpjc:]G)Z31ORdtL"88]Du\[];"."]Tcqbh%!A^l32?2<HYYlW@4V
%[t.q<'#@)*V-F](SF"paO\nO\<0uWsdZt)H,mbB:OQ`eF>01gA[V5UM+./0BfHaT$D7d_$p_YPS=QFRdN$iUZZnGg?:[f]%L^:*!
%`E(bjTR')TIq*4PSdQ%5U):g=]nBd&dPsu3%H.o#&G6oWLK/cPE--,O%(Re]C;j]*kGrTNe3,O#E7U\8ob58l91<CChhL4/<n7kF
%TZ=$f,`Qg?OcsaS3,C1UP<bgtAC%RqQ\;u"*@4<YQ^PM:XK*<\:C0YU?n:N/3#;ZN1'\QA=S%5]`GTD9OW4-?G&+AS>1+DKfk'Oa
%52[DY.hsE,_=c*=I64kVgA-74B7-rpQu>l-^li4;D_k[9$RAp7MC;_-bQ[`=(CNM:Di*:r53p9f8qR_9`YNbrpF,#rYpn4n6de)T
%m,XJBPAaJ@=d`=.:0LoG@4*"\>WKsHLtOagn2Tdq`&/FKoWjnhTihPhi6u^*LjqgHBCX2%:f[r1@Z4o@>S\i6WgmpFGAe$]SKtfs
%\#tUtN@V_OHQ*K)o:\StQbhk>P$=.[nO9g^"Ij=H_[Q_8WoQBq]8D"-V)eIh"`nCt(uS.??+@b66,pHZ>U0S#Y>Tp?^dP2UR'alN
%0UFA!h2UU&;e!Obj^+@MF21G?'Fl=H[Guk]1=;0D\Q?m?CqGNk09.>c'_/=<B4*5i=?6<_WEcG6cqcU=c%QN;!YR/>O[n&s9jpHA
%!AAI//OrL]m3^(%McjdC,f#lm\g/R/c=cr5pq]Co5hc;t@upp6^"U#)n1@']67\>(!*h%DR=E%W/Z5)*Rs6s6TXPE-'^T"`N*2[p
%N1tXt3Mc@<8I?V)DM2;7(DiWnm&P"*,i=HK_$$K-1U[SpJ/h0di.)5;+.HSKI?R3D-<A"iM*i#,TY*I2^rkI/WY-UUAY[,M8MdtJ
%Mqb3$D,_!(X-">9cAejg7QpJ5psm>`A'cB0;3\.FjS5^+[BdrZF!YUH%WKrO^aOj=*'5]TYUUQO^%)T+%"[&O<Z-r?XLY<V&]iF5
%%b_?.Z[W?&%NSoP)32PrN\pln]I:T;dX?/&P39pcc>q5H.O&NaH=7q(-*TCGK4Rb$JK<MC=@b3NX=U$!b-M0bJ[U^u@-fZ7O50+M
%ZTaV8/_W%3gi\uL`%m/g$o]eq<N)?!^EjedBN>k._m^'.@$oW'>$/(17+"q!Z4D:h+a0]VNrtW\V5&Wl'lafu4=+&-Qq,m8bgj+k
%P%BH5k#21H>hi=RpO_jfeJOgcc@AOX`#:kkS^hF&Y/'IK;eR4=?B"r[0^\p`SBZSbLj,c5lj]\W_bVJn34Da>*=c_c=!<iBJ2sN*
%"d(Y$:TWJ!%Bg,`>NBQk9=rBrhJmKAe0#!5i&n*K>PI5:nl8!=jnnW^ns5!)Lf?&LND^V"YKhL<_N?Ne9E0\Nf,9VZGnFVe$IL"T
%)oYfHZ2faoWFS;$WMuq+q80%dfU4,Yi2XH,"]7QDrnQ=U/.;2Lcr`@gR*m0%0R-GF*7DL#HC7@Po4lFq7>+G7B$hqu0/YZVK1[rT
%<3Q_Br+ie.a1GS?k(8]Z=[JnWN6mW]T`oQj1"1-D+Dfsrs4"<LI^G>kj>d)(O]%b)`)[d%dO%;^/UP=L8bYVSOdlstpg7FBONWhs
%"")@R&c%M,mpRSmcl%p,WG[/sf1!^1m$d6kXm1lb^/H[LMi]K5Qq&<U@QZ3P<4ZTKO_r0"BmG,q;=_%'%]V5a*eN*o5)BaM?qQk!
%jH_L05G,:hU1q@X4nE(Z>&c-D`L!Z!=C:HdZJa9q8!ha9(8e?BV1khB2&::/,!Jh]]@[u+#Xp>fU+:3`d9"k#/*`!r`cAJ]o:ga^
%R?f^974^l&:tN$c\16qM2bb0@T;,#O/#'u5arF_N9ZRF:;OET-Zn;H3/#]YRR"fK=W23lGqa%_k=opPmlL9So"AKGKX0n8hdWh1t
%D0!KU.Y]4p`\7eN(hP6LY$$j@e&%ZE8r%/#%LEp#MH>dFC(M0"%IDq:>&ICQ<T'D\:C,rK;CGmk$r5Rs5%aJF9-6C^7]"qV#%r5Q
%MNcJ\oZ)X/;)Vn:Z&Oo'WU)5cfjKjOWj/"JUNjn4@VGG9K)heF)R>d`0ilp-<n17T5A5u4g1FtAVh0&tJcm@JN)(ZB['4G6<+-0c
%/k`uYo;nY8RM?!rKs^N*]T%W9HQ-r$D?UV2n%7#+:!sqWV-5a9-l.&]P02(;V+daQH#9QH_B7ZNN$/rkIZW8pfh.ALIT%<@BCJ/k
%[9R\&i:Lq&=$X"lFDqDfP6L*Q1b-Ii`R*;h+Gd$iN33pj4A1]lif70fQ)hH6&(FVMlZ1,\GGmg+92^nR1t?(8,[kf*2sMXA?nu.G
%kCcHF^Q>`7I[#oqnQs>]7^9)*U-V^"8ktge&L5ol?"I;;mYc5DCK:?<0m<Ct`)r0TX!5Qb)f1aU;LsD#/'ZX1'+O25A6U91:bRZ.
%%OWHr-]0Kk$C[:&eUhNs&D,srY`4&%T6J+1J%n`tVjW.,(6KM][U`u\r&BOf,WKOa4,C%>V%74%Eh9#%KebJsc-/IU<-Ufr0O'm/
%!uO_XNg-P\A5a\]VnTa@4#K;aD!T[6c'8j_WIi(i_:eK^HY@,24;YMJ.MI2ogsCc8,,J;A,<8H(W=ZqJ?<hMKa=>=%8TT=!^DH!J
%:#q0TDCHo+-5&XuWem.BE8mf-$4FQ)*5$$mmU>VMNmg^OH]eOC>o,r.]f17^#.[nhY;Z0S=(7^MI3`45Jg<pT'LlG(&[lVN><btN
%QDImhK$:\<@5Otr=;8UKEB+t?.[!C1N:9eEV)<8\49QT&KESN_m-=Q*$42!qiDOtZ*0nsE:6Y0BFkJ)tb%=?T'Fi;J/R1jnBU<8e
%Q)Jd>2e^X'WtsP`dfH6fHT=[Ydl/kL)jg)]\VKpag2I7UR5kgN3W\+UZqKg&LthMF[8:^B]VNHTeB7NVoHiKrQ^jR($Xa\`mJ:k1
%>'_:Cq1uJ.^3c1Id[a_k5_%>&m6%ng]kU&(=.SLEKYW^ceEERa?q\ZciQ9u3bJ+<gR;?t*L:Qm*,JSr^n-D=0s%@^ciHP$>P`c:a
%59pV8f=W-[!P#J4j;1tLV2XH+L>Zn+P!:Hg>':J:kbAqg+&084JC"hJ7a1qphTe),fA9a4`as%6Kp0[-=9P<+cE5?kLIghNCfo:m
%.RN6eBS],]8+6Xig%mF(72tV2c&&##6eZMn*)QJEhd&PPKEd7B-d<lXlZGrT'PsCkKs@=&Rq4=++g/r`-5:T'V^hEL0WjVNrJ9pp
%VA!M8*@Ylf?CX-0r%`5C;rntj2<AU#"jOi&P,^bpP$0n:&OROn>tf%_)<(7JnnfRu-Rb(7>TjYWP/NKRCR'3n1<lPG-OQ:,\/;Rs
%)eeLrfBFI/9n+2&^9#hWnUbI%(?`fE7#)@$8n-e_4H,O&KLctsf_KB5;R5k&ro5),\_8AJEMBOOf!muXojL9;8K/U8Ol[r+/BJq&
%+'DA7j%dHQfh1glmO^KA+@a,+^n,nOB$PT`1,G*F2P%^U\n*O;@:-a4K`#RlEF26ckJ@_?gR+1(I=T@YYt&<87>e]8ojKdNqThAM
%eGsm^)Q$YiUMu2O9Xhq.#loeBH7u](G`#r6-DcAT)fB&h*6Kk1bb[=$J[tiLTS$Hn#bBKUA3)5%5[&SJVcuFl4B>_8eZK<emV?Cf
%%>SoO7=KFAAr#Em5Q?$b)=tK7h;n_7D#AbSipH5Oo_I\M0q=h/7e;n3bH=Og*c5,Ln+4kt:</:_E:UasL*uS$pK2<%X%6Qs^=Tge
%SL5XE1&9/=&"Ke^Gs39t4["'QI5>#O]2N#\>G#[d4+?qIpj@2<CbHRAq-nJ1<2#J&gGJgm<Zbd]_FPWd29K$lQ@qbo/&-Q!s(DqE
%<>9+`*;K9ual;^Y%Co-@omA_@St9<\EI3`9[m#Q>RqoH_m"qdTXiW752,B/+WP2)j=gQW/iS=$#qMh4,7?sID0[#]UZAPTa<Co+W
%"t&A6,<q;(*C!6oXG)cl)t%+'"lub,CZh"kh=o</8/o`<Il5ZL$1R4XX4eccWML3*R:8qt,$drN8W2;+"CeaFB*V8tX'maNI:&3\
%'b.1*GcinPMb$^>jUh6imRuINElrWKbNTF,h^$<K$JY[6ci%bArjWZRpf<7i]R%K+Brt%1&M66/n4_fo8O4]WK5i7o^00i7L3g*U
%CI\mbBo[jq3CmkHh=E]T<oF(-q>!jX>I)m0NLq^6[Ug`IDKedgG-,%A"giT^n0:JZId[$TD^WBE&I!ti0<XWLr47bZ&5^s<\n_W#
%@M/*/7:QTWSZ5F8Nd<mrcokCh>?<dE9G-:>&&ISjcl['+f%L/VO8[q0M0C/[M8&N0J1+B%jesibXMH,B8!%Q178[/*pi9gbdAN8]
%i)Y@f2I[2-6,`H4KbUARde^=d5[=KX^8l2tof-a9-:E$n036]OJ@pW%"YU+aDQTCO_`?Lhn_<Noek#1#;<";?2N(Zr\ajeMnt8?=
%Y5n+TA9MUPp95HT\iScc>%B/0[`FS#;)eSE(o%;K61jlXo'd#\)LeLhh)O/A:aL1P+bS?rVS-D86=+7q7r?1shO`*PfqF)KQ)pg>
%M".eF*@]N-Jk7f*M-eZGF0NogT1njjHaYLPLD6%)]-NO3*@7Tfmr!*b-_+?UVAqVWDnA-B<2DQ.,41Rm,@$OpN=(p(Kal(O\'-nN
%II"7>O1636:'h5=FOFr#Jd/FWklA2apBgb?-oW=mC+-`hY=&5E@,+)BiH/cS(P*I'.)hq2@qILaRUolGK#8+dJ=$1kr_tDH6(r;j
%m<u_VZ]FS*E;*>8)_"[5NG_kcm6\=23R\:1=R*M<84%<=8b(SI#4R4bYQ5gV$*'_03?;JP9X'5o*ihJJ_seqGJb'8&3tO*![P!$5
%DW@_b33PemC3bPe4%=2\l-miF,0tdC\=Bp30aJ/=QODfLG#Mg#hRJ).cF4a]*)>kKN2o5BH'r%D*i-!rg8sKeC"IiA5lC"eSSd$E
%DS#'jD#HisN%Tk_It*tH%94\:/uG">/MEi;qCm[\dR!\3K,8eI!,o9eo:JU4n,YrV%'nE'E5h/7O%HqMaO)/&d+8I\XJ!D[-n45E
%2LFl9%A5m2f[_0$Y]"c/aj1m8C+1-]CMqYBSNoNnVMFL,G\PU'T7P"_U<`^1Q^Q1)lK_9TS$fK,r6hR`p54UA)`[Cm8HSL#\W3.b
%D`IGP<i1ul+fusX!28!K2=0G*D?[qM.9%dTJ@qm<-gi0(NQ+hE_-OcpEp\ugFpR?PiJn>pl%S$#@]LgH;ek]r=D(P7H@M?QU'TK7
%@\5N^53um@F=Q@DW_"/)6GTgT$gZ6L4'[KiL`EO>]..fm\:$C&1"DJ!;8t#r>rs[j]gKeYH%Hb"^cJq)93\P]Y'TcVGFLBMF</N'
%[YMf2V<b+t;q4W'*#0k(LQ9GN?b@[;)%GFo8+ROFXV%)P)]#gaL1='jNF+_!(lPVLUf-c)C<4V-TU3qOBXEs\MiQbdkm$jA>U@_2
%B(/Vd;N3>^eN$R>#K-%i'S9.D!U#s9j*_nsjul+3d^Fqb%.pQZVf4/Mp12'jZlAkN124cT-!&/R"8A%%E`'atS^#u+R71@%%*u)'
%2o+@kq=J^0m27hM+AKY%Y+3?=pl4dC2[D?bHQp6-m's14o_RK9StX^jd-Br5BQobYkq4[#`nr9&L46"-$27'0&Ms]3E.0)$=qsZ.
%r+fuce68_h>IP^g-[sZ1.QkQO_[#8a72R;=(b"&GUf34uC8<>*SH/a'>oOcVYn$D^Qb_nB@,nfT.8;m7#][$gW/5KfL+G9A^o]&f
%=VX0KpIsO'b0)Z@R=\GbQ^G+B+\W<Af7JYpnSmG0@VW8QjNn$)8s3LtQ3R6A)lq&eFPisB<jN!MB*lOK)&ci0".dW`fNg(5iFI7.
%!>Ro4j)\ir&0,CQ8RGHk(.LSjPc729b6edLLGC?G/0";->QM1*A!]A:cTM<(+t_a,i=!W/\2aT@fDu@5@DfA-?NTohnoQ#O4%_S#
%R'&ig@V0UCS/?Ys3s62K6LpSoN1_C=4GSaOcjIJrNg]3qRJ^kOBI$g%8M$FnG?>$W"<Tt72)t>AM6=4C+YK%u?B2Cr@c5t)d])P0
%/9&nlkA3scEhenA84^/dUaRu;Hto2i\H='`/t)$+]Bc4L9P3.@pi/lb)&2!QP=*Qo+6(?cgIS7s+^$%&L=]B9&q$S9c=PK"KLJV1
%PIHpUjoLNG,+7V,Pq0l/AluqWb*soE</3)0'&Ab72X/i27JJILgp`X;R#W_VLWm1+[5hYI^1T7R?a_^WS+Jk/m"=rWP4Z<-M(P4$
%jGr-&r#HOW0LGY>@Vnm3,T.mbP;'ElPCaERJIuIm%4)^Sj`*#1`,AXEH!Y.rNaJ/Ki[>%t^`Tn+QUjIHU)m[UbCBX\r\8Ni1p-FT
%6*;-8h^l%>SBg2C90baRJWq)u,o:Ddkr.5p0"8q5cb`n?!h&7Uj_YA$U1NJr87`)uks=H*B#<!%@P?"GR_UR483t04WR(M1DJ+%K
%+eQS#GMj9dCr[Nc_G"['l;j9>@&7V[*#eNl_p^L"+L!At6&-q&cqB0AFc9`L%IQ#ON&I73g)tV7K[U@o'Qf*q<&,_\7)YqTP*chc
%RL\]rcLr%H-V@X`MOi]rpE\3NYU*7K@n*c!ei1E>-qMsYJ"s^eH4E/4U.s9"FA\;X+Vi3Z'@Qu?=AJIOHNN9;e6+A=Tq0!F"%AVD
%?EJ&?O%912cbQYWou<!A=nQ7O('^o+A:c9a]]`Iu8jT^s3hoH4QW4L]S]4&XV+:4Zp0:eQ\I=o(9URL>];k@Nr"S;'#a$PIn+6nM
%d_BX;S>R_j_[fcdgn=q;J[I+[%S`2[G(cWD.##B2g8u*t^a&W,8+%#-[AX<BZ".EPX-#%d!q.f4b+L,\TIWjFT;^[%Tf(.HBHkUr
%2:6LZ"GVK,Fd%P^RQs1_X_I%I!?E8Rl"+CRW<N4Bb&-]rQOQK5,O'@9gJS#TSX@3qF[8Pr`5"?!d\>QfLJrjrRar::NMC@mY9%NT
%9$oF]<;e#(LL"0%E(t[VS_YO1KI'AT]hL/b%jh9$Ti_;3@?e^pBLY#=HqCSbijoms$&>6.'-n8iAVDkZf'Cl*Jku:*X^@gQ>=nr\
%No=4lak)f6lu4"T>4".ll<*?.+k<pW+.=3cDek"BOhf1["@VnP*,*S&ktS=Krg(%h5.:%Y6#?j!$[8$%lr*8oLkfnb'Wn2WFO`']
%-Nr[U`aR5p3C;>i`!SVGbFj5obK-bTlaAAe`UB+I)`Mncl/'5]4jiV7_M?BkG/*73\o'IjlR,FB\4!]C%?1png:-R,qU/>A\=3]h
%NQAXg-'fW!A#lC/hmfC>X!C%95cYDbWX7FX&VV=;e^U#2HlY]h;_-C6;BF3?oltH>C<Ztg,r)=KJ>5T*!Zj*gRc(J[q!r]AV(>hC
%UoZA9/oH'gJ&4\KT-0%Q/3?rNk.l3o0tI"T8b@I#``Ci"C22c.ar0(c&(ViDc+i_p]Dkj,7rCkS?Z+"ZC*F4K)-M?[g*]K&%3/(r
%'V;8(`>d\K3-MO)2k^n#*/kVkag((80mLIGY8E^(.3Sla=a,pLl'P(8(cYa-?+;.Q?"Sobf%.$W[1?SK/@O6g/sPMhWO9iW?fXWV
%hKI;d]DPPFWroGq$8S;^JJIh_\*."N5<O)\jI/HMj(m_is7.-BR^qP">"Fe'Q4)p$/k+V,;TCcOC-]=tR_Z64pE)ue"]:f"3HK(l
%W&7P9W'bEk(=7]jou:6*^WZ?)KL)dELH7B]_8gJ^Z:X<N)G+Vn9[-Vg@%;R["oM,:#NWllD/VQs=GIo%,q7;'M''_?%ol4aU1i"P
%R!:3Q<ZR$:6Oc%8H++M9(K&!AAFkB/l&BPaN>S^5lUdC>`6NQ4Q+(I`aED%e$;f$TITun'*M7&o*\C3D455Du,AYmCIdkfq!jnB:
%:$.,I(Zc3t/6unWf^sY$Dfog-JD1G<\j.FCNLq,n<]W2mrbMGaL>qljon>a%a5G,2PbU-W5RpCcNf6OrD@IX,R\TE!H#49,GF)t1
%A+;mF><4<mapRJ]fZ%SK)@o#1$n^2("M=r,q/SefDB$t^j?CY)H?#Fi#V_7AU!Zfji#l+0:iNRP0;)1=<=tHVLNj;'Li'Za46?_E
%$S$\SYKWtA4L/4+rR/7,^-b8Ci-YWq_?(RFh2E,F_cP9b'A`MlI6Kd>W4$8'l1AgLOHg+0La8_I)UVPVM0%GPY]QFAN7alk\FJs#
%'e=A4YJ"!+_jLr;9-c*5h/,g#F!NM#V)GcVU5DB^=-X<$<0Wfgm9a*K[V*7=:ks8^SK55H!(;Z7f,&t7eP2\^_oR`G=9:4M!G_[(
%"WQohI2E4tf@V#A,o^t2m]iYSC6^1:=F*tm$(%'fZg)s_Rc<Ui1miT`^A]>($+0W0r+j9gcPdOaP6<%*`E<pV>h!7Oge+t$^oQ!n
%<mc-Ad$tiMZQ,9%.<]Va<j1[gP.8bZAYj&o0kfl/=#eBe@Dnnp(1QY&"*iCm:Q=B>CXk_7]P7=pN*mKSBgE[s&8muWQO:4ZC:N1j
%GsiOB5"G&:l&q^[\9oX/f#AU?-<8YR/h$:BiO76Z4daf%T#$U99hdI]4l5"*eDG;`2_t+lC5A5(r)>@9)ce/@:"pj!g.3,(b:H'T
%"i5"irC^F-.cFVnhdE9P>bJDahr3682,!/Ll0A@H_)!/bf@8@uZJC\B;tjb.f/F,f6o@\h``,sg-CjBYGh6IP_7b$e`$=>sFi=XL
%H>KS]\)h%+bc.T=ff&dh_ATWNAYVL\JLUd8\d&;Sd-e5^*L]l"MN/[qYt^Au<!tG$Zhcoe`/EZXM4'TpZ=l\]9PHp2-++5mjDap:
%PjnkS\]tno:<j*IADa!/iccg*mTaN(Lf(Z/EoFTR.Z=\VN0CHInSG@>Gs(HFH.9M'<c5fj01rUXX\#]E#M4J9Kli;qHR1S!&"`;"
%2d\Er^]CC6BOXV%PCQX/`d%#C6T5,=/B5E*YQRNML`/n_WJ%(2NbrNl5JZeCS<IS_>f0NOIL*3#p)"G:S%fL=<O87CQ@j+-/*IlX
%7`UPKbW^RFfsK+j!jGdnS"N<D)+I*Ae]&IpLOk`=:r*J>5#G7Q]$e;7/\;![Q#2i87g$5j_9j$[3fXA@VS0o-9.#HHi\WFR[8N._
%2OPDA$$"k^`q+6"Cr)Y:aO)AE.;b8^G_Hg3\gLNaoBUDhR;MEV\gV=o0Qi[Jjh-0HeZuktQ6C"t"Q$_MTo3?7oMccuQjB,Q.U#nR
%5;e@OcG,5@@%HLhh_PN/\k0"[RN@[#FY<l\2B38oPtNL<,3'k8>"G4Z6\ZO%UXME28Eh_&F;MdhN=$35\KOq#PH!,VOm^^?T4*)\
%Ti+_m3Zb+0pT!jaD/qdac,0f>[.f9&_h>Df.^"mM_O3eq9.VU^IkWm**T`C!gO^Ip#d1E=^Z)"<4Z.=Wiin(P9h;Q<AYdQk7H`Af
%BpZMX3"U%DZ\E!j(UJQ^%_/a?c/n<GenSeA)MQ)&,:M+jR&O&'Rd$)9=aG1[.h*O441)OGZu9,HF[d6QNRGiZ$aY#u)SL;i"SDrG
%?]bd/Rgq\b&t;[q2GkFKWgD\-\pP#PQKF`kJ"qpJ!MNEWLo>n+/Q5X60ed;E-"oeioM0MQIR;9!QIaKa>36#[aAO<'/O#9saM=I>
%?h*t8h+JQ:iC&!C(GC?Jd/'Y%34?-4j+<0ukW3m=%!(`tlF>:aDZV@S[[GJ>_BB#`Z]/]/KM2brBPIXb&tVFEJn[GMNTdiJQ1\-G
%Zu>AGRCgXFKnjKp_,E4:a`6blA^s?siCro=^*8K\GOQd\*9t8=D_0:lI,u15]9gY2dOZhd!&bSB,Y=ZGC/gt3E"Og]ir4>c&LDSj
%eT^:4hNEhWSjV^X.jp1(0TD66^L^&:?oZQ5JXpZ7c,B%^DA@^_1FA-YYof48M\Y<$koNPXbE^c/FD$B/.c(=L<<on-D66t4*'>Vi
%YD_*J*$or$$mt$B[oN7Hq1U6L;^,Ro!M&8^d8U8T(X!EnQ^2I.RB)0j_[U`smrT0Ebo]V,#6Lr]5b)R-l6ZrHdL=ii+/OY!h%*=;
%\Roj7`&N@Ec;*GFaec&nG,GG2Ah"ouVqdhY'SXt+?dg,:E8!oP0?=g)MU:;@>t!"\Uukq1oZLiqK34*m-P;HBNS6sGgQ(!';HjR4
%+?.[2Ci(ki,pnH/'%)rZ=@tLQFqe.V\;W7OiF>TRj,&T;'tV9Sb">Y'&hgmfD@7P8o7^5*_)JT#>%kOr+cE-%<6dC:K&)27#S&UF
%SU"P0Wtr_'mK$G7T*!a!::-?'i^Yp.eO<T'gX>H[cFXDd()tg_6?:NKX]bVRQDQj3b-E0(e+?AbXIAh&GEu7+\^50+bZX`KcFdM5
%*j2gX@c=Cf-l:IAB/*Yh5]^#)e-qHR`E"61YgetG'ZGr#h5`XlDe^Ku1mDq7#EdufJg#/AOk*r"M!g&dJZ3d*,pB-U!-#*sUBU-6
%:K.k_U`c'Migf,^Wc&K:S9/>AnQA7kRM<RjROo28%'Q*q[\;H129I842Jh`%)9u^7c&OF,WAB&lVZIRiGE0jJQD',EmW+:Nq2<E*
%JkP<EloLbEi*9L[S92J",2QnbK%9c.NY]S^-u*&>n'SJdKVS]WRL)fl>Oo;tn1g<9@o7e(7\OnqW/C_J"%"5qR.<"$O:\@;hFF>1
%YQ@_cK0kkmUXH#Uk@DG0rh.bf&,[T;7N2Q3Ii%XtW=ap3P4=PlDnA1`i@9M;]^;fm=IWSa.+hKrIUcQ&D1cVQ!og=#mpbgg^t>/t
%gs*f^?0mIp<oYQ$F$J/(Y"<kL]-k-N56F.8fV0b$Lk@X1WSM6(n(>F8Gc%Xe0XIH%F,5KadNh'@i7-j$@dG-r&62?8,n3s;1!/o;
%/;@\uM7R>O3lMZAW6G.7_/RROiN,^U>4l`H5.#DIKXA>qf#\-(2.GhP&Dh2Y2X*kR3/$'4(XB:o(p>kuoo1TfMR0Fih+h^o:jp5u
%^<*[n1b2aAC8M`9PX,DGflfBC.qqs:c'OsOYVIT+G-af(3'8K3-SuMh*IV6_h0Xu!ZlCCg5rD[#D":kp&P(%j*j<\_aP&-R27(#R
%%\S!eAM(2?A&gI4k('tP^0JrXls&QQasIf>)L90re*=`)'md!0#ccH!o?YSP"k+b(3n$d!SAjqI\5J"mU(Lgt)JCC6eVWZTaV4>%
%($;Z-fge.sf`UZLM68%"Bi-$if3OpDgNVFM'*<_f/uWJc4)EqiMY6sakG$1<KfS:l5Ei$DdpJ2M>?XC:CqO7`%;<[QKB,MR`E.]^
%*U>I<FOHJaL<9Oh>IZ9(V!/9D/VF"qF3WZP;;4G#`j*XA)q3uOq8"DYSoF"$lNQ]T>rkB`27CfsX#dqp^75o(Onc0p^B2qF$r^>r
%*>2<2-7L^>64:0Q,pE'%L*Z@=dij!L88^]lq]N)lC)Lm^Wgi"a.\Bo067HaKnbYpq24B1(]h2dZaBRk+'MuCV9M9E1,'\r-g@f=G
%lJ^9>$u,j:aqHcT/Wc&dQUI=$;s0>pW?iNRcWV&97:2`SN]h8KB#&>@od13EGT!#mlr$gq]4#(qYtJ(K*J^lql4Xe1=aD5FVb#%R
%X&Z3c@Lt*1ZVi-R`'PBh9@*f;bEmCTS=qGcY.C./o->J;=^.9K8Ic9%Wtn>`d#!rLFib.6phcG-k[7fPqP2]1E4i5=SdRWn>\r!0
%+Ki.f!WkschK9^5@\,kV[bghM0Wa+bPI`+<[TU0)`,@t0Y:*F7C!9:-7O_Iqbo)hSj"NTcX3kXpDrqS(Mh.[?)]\EAoR[usbD=KT
%Xj!ZF>1`Siq[f,s(7!An\Qe8jRp#l39O<@tV'0=-^6U@&&bKcI*1FefE8p8mJI(\Cf99F.B3(Ui%&0a/_"Y`!>JBd_6N<iU1^kfR
%g-k>5Xm"7\A&hd'Pu<onf1AZqZqP:tBpW/\;JMOTmB+fmF10=)WbHq>-0k?T6KiYeX?B(/#4:ca83tTkJ4?)">_LIK6:/@dRiuRp
%"[>Pq(*`iSmW(OtfV)QrRG627$(RZZ6]TudGY(_h"7EnnMB%6e:a(!UV8f@pfP2`TQJe70>*<03VKSBTLR&lkHqUG*bE5sI'B3"I
%7d<?W9P^IZqq)6)=_'_,L(iGHY>;P@S-5r:B1k,J,ER^*8ff871fe%CE[eHPT\Z%@1<\uNPE!qH.]&jMm>P5W$T_r8oi4Ie!/S'>
%1Us,ibIJ(U1hW9>@f\!#5MU1e)p-sYAJD0cW=cU(r"p>-6d_9k4Vq-O8Jqu(A-0]EC3QYbjduS1l5EbYX+%tBHlHEL:sP]4;pSWQ
%+7f?+,1e$ceF?1g#9lPP)t2]DANRZ11E@+4Hpl;FAc_u[@L0Z4CKHPN3AuGn\Xfscl;)D#Gr+UbGp,Uf[M<f*V8N[7\>eZ_=d()Q
%P9Ms"eUVX_?29R1R_m#_L7&gMgOOSDTuS]kF,][7T$q_\etIlK^`mkp>$?8:L.`XW<i>BaQu&7Q'9;2&8hC-,=`L0NDZc<DJIQJN
%\(<flm[W4CR>CoJQ71r"gE*A*+PR3Iog>2W+^l`LW?_4>\Q+kTOF**..>AD`cq#=gOf$=C5_5EE1BQ;A:(3+sA&G=J&PFgLY%Xbj
%i.B7d?$hTJ3@or?`li\tA@ssa@u]mQhKL]FJ/E5EltfXfE->M]9<CYK61jh%cq8!Y*?9_&*=WnV"2UVdjhiY`?FpnW\4)iE=c:ec
%-sVE+3_S#WGXR^r^09W(8Ys[,@ApRsnH:0`#n%K^XORb=:K$K7-B2onP>o/G]nd<EM,%m[AT<1.d-/]f,r(<B<I_,oV-<^DVG(g<
%;i<N4ae##<7i"b=m;tr^Z5Ap'oO9n\1O?XfI(5YFDauTrq7OSmMk<UXV+`2>V1VG8[F5F.oEu(A$lE=8Fuos[\]4BV"K$]n*A@&a
%V$5Ktg4`;u(4K/pK*TZ+C<d[[N\UXHAs\OsEABe;kX>)SE;LeR.aIN7j9Eg@aoItjE=)AMkDh8kf&L1@.5V.sX'ZN*m7^>[7puUV
%[.Ms2=5/AFY.!Pa.B`1O-VcqrWo^V2`7g"o@AODcaf&,g"P4^1/Q0D3ae8%s'&,k%2t55li7+X;[9TuqAoV#'_3=$\\F(4W:)IaB
%GZ_\W_TumRCWG_`MQFkq<]-T@+h3IfFq:i1ZiTd6L:l#HUiQgZK2\+50XdOEA<YHT(,+q^,`"@S=56>@Pq&1LBPkC(Bq_`;4:(fA
%O.o9W&m7#;Q//bLa,9te"WpIjVh==-I)kUn+[A]09c6Te`eD.U/T[;uO]?U!j'?m4\1YIHdAg2E`<@SL%jk/^#/@8T,tiTHneB<b
%$V,X"O6%(AWK"/6l\_6d,M4$b1kV)G=QL9(!S6%odfkU,:/B]2TJ>i"f$%PAUK!H,.jWj9MQtXD"^Po%4BjB@a&oM_^b(O1ZMM!$
%C;c>TiYX%gDm9%0lOIUH-,>QCq:5^'jq`$U:Gc&W77TWQ=75;s^h?B-YH<.:PLSYo89CDQmZ^,k>?tc%m_TJWA1jEC;-EPHnt%f[
%EYm(Q0*c4*DYVmI_iFr2]!:gd<G`?FNgl"RD3+g;VYKU#FJ>k-+-Pb#3Nd)4q]:]*eS%JnAK`3(Q'g2MRFoqCB@Y\1h`k-s:!tg*
%'dcqE>`g0^YFB9HS'\lkdI)P*SS(NdF'B,DlqFH.JNm;dQ]/Lf/CMVHkm]a5RbEJ`^7$&LOXt$X@5LW3.T]/O*>r%e"E6=8,0MP<
%UGPcoU(L/IgnQD@B`U'eGc>26NnOiI19LZ;\cK!+Q'S1;N/;cZgU3.EF_*=\=XI2hWJF'kU#^AQCa1tcO-l4k/m8-:P,YN.>LCS-
%m?,Jj=Y=CM.iC`G.o@Dfg)_5Xa/M+@#]071"g8,H*7osS@2@-j9aOp-"((#oi^'j'Vpb)kE\/8fpGQ.?i:Jm$L+OL\#`BBjbu[5*
%Jj\H8J^/Ds(;bHsDg49Q8U)cVbb;ndo+G<.WP"7=m^TJ8GlVr^8?o4H#sCcd_b&]qk'Bp%G6"<MB*?U"Y%TU[$VNW-7SA\\kYK)Q
%NW?)*a3`AInBE*!92hn$dBtJkj:6%cEhfn,fEK*hl!(`S&X6]T88CHAYetQ+@7eC)WgUkN^c<U>"";FAU.2AYd^l#1:@iC+QO=JE
%L:uF6`7N%E8?5;K`AE\*j/+Cs%k<K[&#Q)CZPGil.#2GDU5"\t=]PVU+rZmu^lOW_+Uk8[K1J5r-$=J"@b8eY%2rP>:aR.VSO*TT
%a7VqSs1fr4NZZs;[Cn*r4I<lhkjukf=UP%KE9at["rlH'N]CWTB_EpRs/3]Qe%+N1:Y^K'4Y?):e9F+4g!L3l7T@bV\6)R(g.M"I
%M'=s.KT=cC+S?o!7e&0>oGZ,dbNH<d[*do7+3Ltde\5U\DgNIcQrNUE(W_@aA#gkgEZd+qG%JNGAm)O2"fS2.ok.Odn=:Wb*G?&?
%/h3n5!Cih2LMt-Ui)s8n(r'?$kb"-@_b4C&/3rg\1WQ5j;,[,8'bje1.[8J(>,nC85nXM"K)o\=.T@S&geDTBrra!JY#N8TBJY,p
%YtV7hU=<1!*@uu@[2g"o`JM!;+nD&WD:nK?2hMUW6usI?`nVSRHaM#BXi)]`E/lRUFg9f3PZ_^t!gr54ReR7C$^kAuZ7X?d#M"ru
%MJlJD3GD+&4IHbfV&WO^#`OnGJKsb!Kr?aom3okd:NBJi85X+7e?\+m.sHB-I:&FQKPN_<9/X#LAR4-\]aB:$EsbaV<dNIF3T=66
%Wit1;8<)oU#!oB@*P[9*%%bIPM,2o0S7$#\Dn>jke%."Ipubm4`f\t:K9tt/(P<uul_\iS4<1J;dMIQSQ5,aH_j?,Td'Qbu/&;:F
%"r1F;@75F1bQ&`*BZmO+nAo?JL&bN;^qOs>$!9))[?3BU\"$(.2mK5=SF5fb4!]T7A\'DIQsq?fUcs!=?$'<3jE\-f&/7(21R!Dk
%a5W7>SY(>V!j#;7r'B^'Q\747IQ'[^0.W;UJ>%ZfRooS+J4b-7L?'/e@M!+4;CKg`N[jM1\#lj/(2"#Y.p7Hc=1<SC]k$u]O)R6J
%lV:_p5<L!b9'(>dVAQ-i.bD9];BjI/oME5bPX@;F4OXJsg=hjf*Kf4T5oGapWU38Z%2-jkcj/[H.[cCWk<lS0f\;:L,5P+s9H)67
%!Rb[=`XS?"=q=EY]8Jt4G2%`"!]KE>`Y4&:auP/?<-eP`1`[:^ma=_F<41^ni/0%eE:$(n1!?\phlC[q87^/a8)C(/CIONI`f<Wp
%^QAkR4tEt>CuPfuEaG'/]n`75!G4dS8(+c&$Li>?.>h15UMoX,?#t4*$EagiLDR_%!BkO/b1Upk@7tSFV`-4)^UB^qr._j#m4`6T
%"E`Q9En:ZLC:PZHkH!Z]?Tm>ZQWI^fB3c`'0i>Mkn"<ZMi?F%"+?cJ&Fq%AtO=TB;$o&/mEZ"J#3@=hGbO;g:Bq."9J2"m]k#0#_
%e[`4tP)\1]_J$ZF`=hrP\RDIS=(O]tHNWu&L>)-1?]`8Ma9bS#=4PAI"@f$g4=ke8<qX2$i'Al%TQ__P`!sb.`ts9'N#G!kgt#T6
%\<,buW\N9NL6mq=<fLC+s)Xrap)s=I!DLULf5An0#gM/_7\15SeiFUj;md#^D6a2u]<i8%D@k5k3bYN(PV'RJpk2eR6ek5O')X$%
%Wal1,/!\[V.n^*ALAfu:%EL!<XTg)g;A0u\?Dc4LIs*Djb_^hn3:<10^."&BKNBZoRaa&t/X-c.U+O*]KJn8V;E'rE"I5)U"gHo@
%r7n_A'2eEP)(c&+fa@P_N?F\Uf^AX8D\Wc_GbUJW$7N.l8H:G;OXJkiUrF'`1KIBMRH<jm:o!Z)9R'i"0?kT\YRT%T6LV(sc:Q_i
%1I[.eCcp?3^,ff(BET/),31hUWpdYY_2Gd+8ui&:SY6mr6C.M&LIO5A']8^Jq'kl(aA2Q!d3cg$\OsULanM%%)a$jD''`:>Si_9o
%6Lf:u8:t0oi!n]\iWn0J$7/cs!nH]f.<\L$@tLachE@,>iDrYsEJT]HFUB<g>2qs%WO-?%CpnL`n2@81a@hjShJoNST81GH"6r=N
%Ih<;CPUF:9,/tQiTPlG"LJ5;Rb,@-gT-&SkVM<H(mMm`Hiblh"Zsmf;+K$R"O[t[FVjOIHr9BmB<2[DKq]2llG@gF^bl:WgZ?9n1
%EMM8N:m#4Q!J8>X343)^&q[PI'&tPZc-ca(aNR!/9f+mDO"rSAK-CMb90qnW-g`@OR,t>7L)"8MnB)qVTLnUPYuc0B/'EE[bGX>%
%pm;b_[98b^'K($o*S!(QiaeB)ZkX5mCTCob#BY(XSJg786@n%#lH3Kda)j3Zmd?5"ec)2a,]GUI'<E+M7YP0U6*%&Z*jCoF1!'3&
%p57Z(,`E&c]d6B3Yj]+oVLV,:a"$ATb#SUR.`r!#S?%?L53S01B#K;g8qk+3ID"IJfLX/c9f.j@FqQ/C=ZpM:0u30FHohm#FB+U4
%PurBC<iMpVC%_Y'"-K?L#]uprW7h(uR@>_6G_[eMRmVMhkC^+A%;<,7*W[4u]8q*F?@rFt9hltejmp^b=Kl9kW_5hOh+E#iF<dpt
%RrZqV\7gR_nROBfbN7e/?K#R6SrbIYlQY*9.Y(0OXX5fFSMNsBmHgLck16Xb)gV&[=U]IVJLS'`kNcm7]ZRT.p$g1\e,n/u[YmNu
%c-aHS>cn*KVlt'plra#:<lP^nko"R(D!p#qJ?fcR+cR2%6:-#i1QJd0,]Eu9V`_h;\fY7>80Tu%Z>eQ<TVmijc,X?FZX'r0lE"up
%30m>BX$!Q,?GnJ`#D":Ghh+R5c5oKi[cVYKB.:Ajk\%S<U3Bc484IO6GUTRs'!br`]>qFl_UCBSc(MLABVIbX2Sg9,mNP:7;PApQ
%8b??Zd;-IkiO%#Up_<?<!uPp#J`_U)O1^oqR)E.h1/Zf^)76utWLLG3=Xfgj?<<9^AIATW=$g"\)G_c%_"D^&gn:K%YG-!T%=?sF
%Qq64M:)?g:/K[!(.CeNc.5bf;[Pi.ki^&i?P5,&YG:bt@*_#R9ao>d&5-@mgmlH&3,U?$%J2:@<.tcojd2E5V^S`82Z?iCGf>c0.
%MhQhLmeIo(oi:)u1;YQSRK*^5/?1,KfV[1=&$4uo;to8+)&%#lJV#"=6X1bd,X?iG0*tKiph@gR277BkSt5GZJWVGf/sQH6.gl<[
%?h]&Zq%J^iGT;m\m3MZN=?JRIl\q`IZIZ@hfJmO4U1MH[K\)S3:]T_j[;81.>M:,B1gE?517a(.,Y^'"2aVX\)!/V)\;6o_Mk\VG
%n\MM@Q4-sFesNdZcM:\C:ogls>bI>Acr-Ua4!V^`9`ad`jEjlo1oe,3:ckEn0j=`#JHO&%%.C+'fobu2h[V*QP[u-</iNCBj,i*^
%WdLHRCl2+eIq6mmK"e`RI3ZRp4[r*6$&87VL\$85$qS0uSorl&j\=D.%?AVpd$<a.XE:/f=)IMTT5,bD!i?J;'q(1;8?/Ip"-+mi
%f]27Fmp$BK6C1,gbLrWPYfO?92RGiY9-grBSUM8R,+!q(k`26fJrE5kn4`q$rBXYKX]&&oC(c#d`^)X2ZkGVQrNsL""BkMae.agj
%'kBQsMr%5<G50d2Sil3oL:DbrA^&H-EW*nL?9JEaXBME]HOmP%ZqQBt)D3VRGUSm?<,;kIE7NSA6PhJGH2!C^=s>:e;@`?Q]+gH:
%7&^$V.bEMmc]?m2!7.'P<r8,)e>76C7bfacgl$P84gP!f0NI6LhC#)N)5?%a<Eo5`[oGM=U!4t$VoSdUlR[E#opuqR.oe*5V99%.
%Ms)mRkH)0P7eb15'l[+"L=uU\q^LB#qDsKW__Kf"F*1/QqQpV,L2r-(eFkr49Me@`i2oH)]a`t[JIiF<.,GSN=KgSJ$eZ_CA"3Pe
%/L*`"\AD8jECM3[\;s)O4_kC%rUPUWhEjpW^dD.Omt_e1,DAFSdEmEl85__]N@-&djRr<'5BhT^V!MiJOh:'sWIah\m:uNul;17:
%-rM,&]FL1I9;4/C'0B\<^=dkoM8L&9I<ZQ,A_UVBfMg(^L>OEMVW$>!fnJ=!jQ&u%b"M3*56AE2dF-m;j7Y>/]h=sVqM"B$U^;J'
%q6HH`BnKTJ&U[dl<aLCoT-'6nGjmTH&4PR*(J"U]9a:)-hWP$[R-uG>2_E^"*K"!^?Yu$PL3X"\U=3tZm\LWQUUZ?la,,A<b(Bt@
%7NB+deWN2tgY+C5.[o8QR_j7S([FB/H]8%agZe[njB7OL3OP5NnNl)s"Pq3f'IM>`!RKG%$u_*kcck5=7SEQdUD\!OO_tG4MZ@0R
%gM[?\_/Ur"Q3i-6W3=sWl=k2%RR#(uB2k8&a,d1OWin7+#tmoGgEA`$ECBO/o+jP,s/C9d*NY]Q>^)g#'(Y&SA(.,h0-Ib4oJq3e
%DSGJ8kK#i$+X\9'aTbb>2M(/K&uAD3]SUotgS=J*+dK/4nt)[1ruu0>KMQXqb1Orr.cbfROo_#hG2PYOMoM"a&eB?V_8!Zq`;$*.
%Oal"[fbi)@TceJb+fQLd,f?kMDRb#Y:TkN8.Znm&6!'XMF2>s,mS.p\=d@_mH44;sWZB^!Wu2L<@Sat[;\khLfFji8q&0!!/EbZe
%3YR6VcSLHf6ZO?'G9:R792Uo>;5tnTH\p\,S:I"-Ade(Z*)1ugfaO62M*`<FfrK$/B6P6q483d,4-hjXZ($e>A>6pZjl7NS&#;FF
%G;HrQhG<Y47$'CFnR8'_4+0LcSN)H[]-rICFb4]N,.C'RaSUjVE3>n.ScV*OmZ!,E517`gZ(A[mcE=GAIp"YkUJ8.*Zh@D2WZguW
%aPMkU7(%+7&pLI3&F7c.pd_[&MVb31YHGq22_Tt'l<33#`PD3]<MLRlG<$4o,\dnPl)4Gc.l2i$.hp"?&2=CS#6`JQ,pIUr#[(&X
%"1+Y8pd#F\%h5O2rAS'Bdjl;%7pG?`^eCE@&m=)i/<S<EhO]\]eV`C]T]Q,LRGtnE8"P0SC[f8VRnqaH3Ok$L8.h$sA*:t;E@?n^
%)$Qg;3L,h!1=gXP[.4Y6cXK44/)Y,1e=pnso*iIX-tWMSmYl;c?>B`.$9HnP6JYCAN[r^rb1>Zf_'$A*Ln%X10[!<HRcNPkGg0\n
%nM93c!PWdRKWP75XAfQTN3"5b*#6T5qW.dW5)6,X*#;.Y%3;ohE<UtnE5capDamrrg74;@5GEIGkKRtL)Rj8*VQN:Zl_co=Q[<*q
%3m%PEJTTk]Vi1WEf$muA&nGuUXW?c]aJVYFI#%9\h4'*P1olq`e_"j-"B!E`>*U/TJ-**(Y;>G\?J9Zb^->O1W%Dqsl5.[;ic@?]
%Z:4R$DR<RP$mjOMVR1`ebuM^3O7N4KjMZS3(il?sQ%fD91JF@0`@SOe)A;JcpA'A.Bp9YO,W:8<@!_[`V*e$I[_4%:aYZ?Pcc_[Q
%kmDV1]cj=k2#&;GAghXO+_5p$5^*(sNPW0s#D@k<G1o8[5kWS1kH'_XWigO)/VV=Q&\?Pgr<IpPj(&.Q>2#kM-]Bl.h2Q51oEDdG
%,S`*L^FWh+aD1V.C38n%&Qj]Oc\5nK&G'"'[)h#TIgoM$q>d<W0<s=jO,^+gOQ.3J%sE9[_!Gl][1mc.?4Y@0k?.,Z!O]Y9-.TdA
%k!Z]N<ME-]eg,j8,q<s\VE:e;bX;]]@6/l[[%ES:aj_OIdI<(s^Ue_[+LV*gDm'Yk$BLK*7(9,0J)Cu-EU/E#%E;,O?K9N+)(Ktr
%V]KkD?g+&hYnC=X,1ge0>b",sO;2"%<4i9O,961E&(#mS7pmaBF4?oiUO<HgE=ND]?s)IlVV8G.qC0hiSu]>T@:Mn74`X`=_<,*b
%h*HE&,jbj%/JK>]9b2W0h;mbG/#NKaHd3J$!RXhTagk4`YZg(#/@L3,!,:?##_nc-5$nfh]p!>A;D-q4G'I!T<)ue0"3ZosE=ZY`
%5L'*dg.FUo<_jM8f.r=W%PeqqHI.m.Bq@M`3nQXU'WMCBAa]EOU;%_S/e45<gj_[#BgF@+S@3/K<@9-qRLjocJV'l'a=(bJEr>ZZ
%n_'^V7jgIBS*^nfCIqtK.J9WeoK8`GT#@j$&V_pOL[3p4Zc`=]6lQ^>f+F"ti-c=,/dfuMXfj?nioAepTR;\#];OR2BZ3Bs1I;Tn
%7JP4bgK-PV<>OI7S<7nAK[u"`Etc=kr$<teKp'T@[EgYAD?R[_/BkpZh8SRF%LSbIU#Ubu^T;s[;buq*;&73,hADbEIm9,7L=6Tq
%Jn\a=OQe-)R;eQ'=N2_"A<;ORprrs!enL%anhsBr,^c9(/16Ci=KGhuWpL^.9]dK,E3;)l'VgYN5KVc,g'k#ZZ^DDN)04IiU6<Is
%-JtPs[gp2EG=Bl`<+bcl*NEi#lW]m>h=D+87d$r7s-uPjhgWse.'l2A/qI)8n"UG3?_LBSnIL?.dfQ4%:,8<;DHr"RoC.@19jmlc
%2K(TQ-Y-`.9]Wr7l/O"<$]I?!6LW%RJdUa=cE?Qc?j-8b-Lij3BD#?=fhg!fA)G>VKsMGu^Esgo6KCjNQFtH@nH-j_)^-[VqBH[`
%3[].+?,U&mC=2Blk2\'V_LQTZ)_F%/(hW:>i-\cq"kXDmC`<pI4c%;6MQjRBl.s$j[,t-N[Y+6k"gM"Xc!HG,cR]S`3mD#^ZJ$?b
%cCF9%OMtU!"@NLabS08XW:#ak)p<t+bAf7bBb3nn6f;A>DpF[R-tfpr&;Qul]jDEnP"2SiV:ba4"_I*6q^?Of^>bN3=R!&_6*+bS
%5R&#uP212m5'[%1K.Xl7Tiek_V8Vk!j53d-YDk@9?>&*oD1uL2b(^?i"YMWfX,3._o4.O@.AFH^Y'p=sE,t#,2i,C-NNq2&'o;Je
%NHql:*g\CjD_q*%$\Eaq5^_:uN\p^+.m1\.nc%h1,1QK4\^3e4>P;H1,ThKea3Rf"MnS_Y+j)7\-]J&d(2>u9l[7%(8\+4&]0ES2
%aD.BS)?dB$Q5(G'gK5H2jTFBdZ,ImO+h/!^d,HUm/NIRiBuGX0]u433m2u6Je-Ifdo2#i?GmIGRJh..Mg$-lb^+q4oJYu?qjs<Tc
%m>^^1Q&F:bPl83t,X\#5qOPD7>,2rL96<P'iV(FNmN>o/k3;rUY5XV!7^#*9N.6:BYhGIE:@(X.?6Z&BCpHF4MTlS<c!MP`!!Q1:
%HVEtCAV%un9NXj)6YY_SlpI/0Y\ta'</PLNh.Y!3DaK"sH(,--<EO0I.3X11@hK)3d%FKb\.d&3DQDcN\!?M-rUr&[abjpIqIecb
%%EQK7:1gRGOonCidMOQG&1s8Xbe\:60":E`<u)GsG0,.<d?]D]SFJ$\@$oXBq_XjSHqu^u$Rs0deoZag/qdq%W9c:<s(UgO\F;O]
%R=3&m1!=U$O/62KgjKk`Hf[2M68aSNX.,Qh],LN>SI^f,*$!uZrH<VcL]K_?4aDlE7e4b>KQte79`3(6Eo.mWYFm[uW-CZQj.5P;
%GQ\t/JEs/!Tu..(5.$GdaGh=7kF=;gdLXGDBL-;gEIj4eH*9EgWQ/_-'XL^Uma%C!,=.@GZ.:p]'S\dq]GV7KG*(iXY_I8bG[`Ld
%.X;5].)[+<_RsQD:%KDfg'N+H48XW=0fraS)`(8>)!a_d?+!bFB&#6_iWuWble0pfQ%B"+WfAorH))(OThT$QelUEQRQhapcm!_'
%i-=nK.F_b#7&b(jC**NaH!C-J+Uor\-)jLRpp3[qL6!AIB5X74CA)!eQ+JY<nrGA7TfOrmq#@b^Hp:t]#ZBm*mI,U]c\.n@dWYKX
%kjT8)5^54&102auq[kQWV3?K[U]/3RnW@nWNX*_OkPS+N7.bdUC'J;_'%c#hHl2;I#4S=YSala;1NGo^$;uAl$R!o+;A=G_V)"nn
%OXh'4`%-@[#kH[@Q@MrGiVmfmP^:Z?jJtI&J8<BXb_Z@H`ApXA>(!CF*-/*cHuarD.VO0.!+4;h#;->$+H&?u;EfdN+?(HR#A[`p
%(s"'P*P"Ps8c:%R!udl;e$kM[06('j83T`X$"SnnG:atGJPnU,"3uS>F:h`4J2D\1OcMifC3?%V4VedfPW?,%(>sX-OM+IJVDkm^
%pk2Z*PiMstl700V+I)"Uol>'L[nrSf>]Tlrgijic_`No&a;6Zc-rLKB]sWP`&Q"D#hPW?;=j%lmK(%cM>"nT3k5edsk'X;jC^&Pt
%p5pefZLQ[R!@,PteHF:K]I;K7LoQ2TJ^\&^$p"(_L*oMMCa4bIg?E;O=S>#oSqNIV:;_I#=<p9G&u21//KZd&k1i5[mjhKO5:d<.
%d6,K[R.\PZi]N:Xe^DRgf:$\%mX_`g=B$4>ni')5iQc#>s$"j2/5$kRk=^?@m/CH#/::@gq%<Zt_OAf;!4&W"hcKuOP\=-6!6c-h
%f4uKi2D7]'7#-@?>qLUP96jY?#X-aDf*bsnE;!fGYSAk,>QLc4S>gtG"GT1jc^)?XL"VY9n8`X>\ceUr7">-e<V>,<_f(";%DVaV
%qpX0Ss7r-C+5X_]rH]Esq#-\#hu;U5S%jFHpAO0HIJ`&oa1&8/I/c?Iqt=t*5J?perS&ForknWBYC?Dm&-%:dIrt\JM_DgDh/>LW
%lsB`(`.J~>
%AI9_PrivateDataEnd
